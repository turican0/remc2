
			 Version 3.0 DigPak

			     written by

			  John W. Ratcliff

Includes one set of sources that works in all memory models.  Full
MIDPAK compatible support.

The set of digitized sound drivers hook into user interrupt vector 66h
to provide a clean clear programmers interface. This document describes
the two ways you can access the digitized sound package.  The first is
the interrupt level interface.	The second is a link library interface
that provides a set of C or assembly language callable functions to
access not only the digitized sound drivers but also provides usefull
support routines.  These glue code functions are located in the source
file DIGPLAY.ASM.


***********************************************************************
*************** INT 66h Interface Specification ***********************
***********************************************************************

When invoking digplay functions to play sound you pass the address of
a sound structure (SNDSTRUC) that contains the basic information
describing the sound effect you wish to play.


typedef struct
{
	unsigned char far *sound; // Far address of audio data.
	unsigned int	 sndlen;  // Length of audio sample.
	int far *IsPlaying;	  // Address of play status flag.
	int	frequency;	  // Playback frequency.
} SNDSTRUC;

********* DIGPAK functions ************************************

Function #1: DigPlay, Play an 8 bit digitized sound.

	INPUT:	AX = 688h    Command number.
		DS:SI	     Point to a sound structure that
			     describes the sound effect to be played.

Function #2: SoundStatus, Check current status of sound driver.

	INPUT:	AX = 689h
	OUTPUT: AX = 0	     No sound is playing.
		   = 1	     Sound effect currently playing.

Function #3: MassageAudio, Preformat audio data into ouptut hardware format.

	INPUT:	AX = 68Ah
		DS:SI	     Point to address of sound structure.

Function #4: DigPlay2, Play preformatted audio data.

	INPUT:	AX = 68Bh
		DS:SI	     Point to address of sound structure.

Function #5: AudioCapabilities, Report capabilities of hardware device.

	INPUT:	AX = 68Ch
	OUTPU:	AX = Bit 0 -> On, supports background playback.
			      Off, driver only plays as a foreground process.
		     Bit 1 -> On, source data is reformatted for output device.
			       Off, device handles raw 8 bit unsigned audio.
		     Bit 2 -> On, Device plays back at a fixed frequency, but
				  the audio driver will downsample input data
				  to fit.
			      Off, device plays back at user specified frequency.
			      (NOTE: You can still playback an audio sample at
				     whatever frequency you wish.  The driver
				     will simply downsample the data to fit
				     the output hardware.  Currently it does
				     not support upsampling though.)
		     Bit 3 -> On, this device uses the timer interrupt vector
			      during sound playback.
		     Bit 4 -> Driver supports timer sharing BETA!!
		     Bit 5 -> Supports looped sounds and pending, BETA!!!
		     Bit 6 -> Supports stereo panning.
		     Bit 7 -> Supports 8 bit PCM stereo playback.
		DX = If this device plays back at a fixed frequency the DX
		     register will contain that fixed frequency playback rate.

Function #6: ReportSample, Report current playback address.

	INPUT:	AX = 68Dh
	OUTPUT: AX = Current playback address.	Obviously this only
		     applies to background drivers.  Note that for some
		     drivers this playback address is an aproximation
		     and not necessarily the EXACT sample location.
		     You can use this service to synchronize
		     animation or video effects temporaly with the
		     audio output.

Function #7: SetCallBackAddress, sets a user's sound completion
		     callback addess.

	INPUT: AX = 068Eh
	       BX = Offset portion of far procedure to callback.
	       DX = Segment portion of far procedure to callback.
	       DS = Data Segment register value to load at callback time.
	OUTPUT: None.

	       This function allows the user to specify a callback
	       address of a far procedure to be invoked when a sound
	       effect has completed being played.  This function is
	       disabled by default.  Sending a valid address to this
	       function will cause a callback to occur whenever a sound
	       sample has completed being played.  The callers DS register
	       will be loaded for him at callback time.  Be very careful
	       when using this feature.  The application callback procedure
	       is being invoked typically during a hardware interupt.
	       Your application should spend a small an amount of time
	       as possible during this callback.  Remember that the
	       callback must be a far procedure.  The sound driver
	       preserves ALL registers so your callback function does
	       not need to do so.  Do not perform any DOS functions
	       during callback time because DOS is not re-entrent.
	       Keep in mind that your own application has been interupted
	       by the hardware it this point.  Be very careful when making
	       assumptions about the state of your application during
	       callback time.  Hardware callbacks are generally used
	       to communicate sound event information to the application
	       or to perform a technique called double-buffering, whereby
	       your application immediatly posts another sound effect to
	       be played at the exact time that the last sound effect
	       has completed.

	       WARNING!!! Be sure to turn off hardware callbacks when
	       your application leaves!!! Otherwise, harware callbacks
	       will be pointing off into memory that no longer contains
	       code.  This function is for advanced programmers only.

Function #8: StopSound, stop currently playing sound.

	INPUT: AX = 68Fh
	OUTPUT: None.

	      Will cause any currently playing sound effect to be
	      terminated.


Function #9: SetAudioHardware, set up hardware information.

	This function is not available.  A new method is now
	available for reconfiguring the hardware setup for
	any driver.  Every driver is a file on disk, in .COM
	format.  At byte locations 106h, 108h, and 10Ah, you
	will find the following values:

		Base Hardware Address: 106h offset in file.
		IRQ:		       108h
		Other (dma channel):   10Ah

	If any of these three locations contain a -1, then that
	value cannot be reconfigured.  If all three contain a -1,
	then nothing can be reconfigured for this driver.  Otherwise
	it contains the default value for this driver.	Your setup
	program can poke new values into these locations, according
	to the configuration information provided by the user.


FUNCTION #10: ReportCallbackAddress

	INPUT: AX = 691h
	OUTPUT: AX:DX -> far pointer to current callback address.
		BX -> original caller's DS register.

	This function should probably never need to be used by your
	application software.  It is provided because the MIDPAK,
	MIDI driver, needs to revector hardware callbacks so that
	it can handle hardware contention problems between digitized
	sound playback and synthesized sound playback.

FUNCTION #11: RestoreHardware

	INPUT: AX = 692h
	OUTPUT:

	      Put hardware back to initial state.  Invoked by the
	      DeInstall code.  Not to be called by an application program!

FUNCTION #12: SetTimerDivsorRate

	INPUT: AX = 693h
	       DX = Countdown timer divisor rate, so that timer based
		    drivers can service application timer interrupts
		    at their previous rate.  Service rate will be an
		    aproximation, that is fairly close.  To reset timer
		    divisor to default of 18.2 pass a 0 in the DX register.
		    WARNING!!! If you make use of timer sharing, be sure
		    to reset it back to the normal 18.2 time per second
		    rate when you exit.

FUNCTION #13: DigPlayLoop (not a MIDPAK compatible function)
		This function is in beta form, for version 2.1 release.
		Use it at your own risk!!!!!!!!!

	INPUT: AX = 694h
	       DS:SI ->sound structure, preformated data.

FUNCTION #14: PostAudioPending
		This function is in beta form, for version 2.1 release.
		Use it at your own risk!!!!!!!!!

	INPUT: AX = 695h
	       DS:SI -> sound structure, preformated data.

	OUTPUT: AX = 0	Sound was started playing.
		AX = 1	Sound was posted as pending to play.
		AX = 2	Already a sound effect pending, this one not posted.

FUNCTION #15: AudioPendingStatus
		This function is in beta form, for version 2.1 release.
		Use it at your own risk!!!!!!!!!

	INPUT:	AX = 696h

	OUTPUT: AX = 0 No sound is playing.
		AX = 1 Sound playing, sound pending.
		AX = 2 Sound playing, no sound pending.

FUNCTION #16: SetStereoPan

	 INPUT: AX = 697h
		DX = stereo pan value. 0 full volume right.
				      64 full volume both.
				     127 full volume left.
       OUTPUT: AX = 0 command ignored, driver doesn't support stereo panning.
	       AX = 1 pan set.



 FUNCTION #17: SetPlayMode

	 INPUT: AX = 698h
		DX = Play Mode function.
			DX = 0 -> 8 bit PCM
			   = 1 -> 8 bit Stereo PCM (left/right)
			   = 2 -> 16 bit PCM
			   = 3 -> 16 bit PCM stereo

		Once the play mode has been changed, all DigPak functions
		work exactly the same as before but expect data passed as
		specified by this play mode.  8 bit PCM Stereo has left/right
		channel pairs.	Supported by Stereo FX card and Sound Blaster
		Pro.

       OUTPUT: AX = 1 -> mode set.
	       AX = 0 -> mode not supported by this driver.

FUNCTION #18:	Report Pending Status Flag adddress.

	INPUT: AX=699h
	OUTPUT: AX:DX -> form far Address of Pending status flag.

 FUNCTION #19: Set audio recording mode.

	 INPUT: AX = 69Ah
		DX = 0 turn audio recording ON.
		   = 1 turn audio recording OFF.

       OUTPUT: AX = 0 sound driver doesn't support audio recording.
	       AX = 1 audio recording mode is set.

***********************************************************************
** DigPlay, linkable interface to the Digitized Sound Package.	  *****
***********************************************************************
The file DIGPLAY.ASM is a small assembly language source file that
provides C compatible procedure calls to hook into the Digitized
Sound Package.	DIGPLAY.ASM uses one include file called PROLOGUE.MAC.
This is a macro header file that defines some basic useful assembly
language macros.

DIGPLAY.ASM is written in Turbo Assebmler's IDEAL mode.  The MASM syntax
for 8086 assembler is abhorent.  The Turbo Assembler IDEAL mode offers
true local labels, real data structures, typecasting, automatic argument
passing, and local memory allocation. Turbo Assembler in IDEAL mode
provides many of the features of a high-level langauge.  Turbo Assembler
and Turbo Debugger combined are without question the most powerful
assembly language tools available for any 8086 programmer.  The last I
checked, Turbo Assembler and Turbo Debugger sold for less than $99.
Recently Microsoft released a new version of MASM that finally provides
some of the features that Turbo Assembler has had for over three years;
and requires a new assembly language syntax.  For these reasons I can
no longer consider MASM the standard for 8086 DOS based assemblers and
that it why you will find all assembly language source code here
provided in Turbo Assembler IDEAL mode format.	If you do not have
Turbo Assembler simply link to one of the two following object modules.

All these link layer procedures are defined as far calls and accept far
addresses for all pointers passed.  The reason for this is so that you
can link to one object module regardless of the memory model you are
working in.

The C prototype header file for DigPlay support functions are as follows:

#define LOADABLE_DRIVERS 1 // Conditional compilation, set to true if
													 // Supporting loadable drivers.

/* Bit flags to denote audio driver capabilities. */
/* returned by the AudioCapabilities call.				*/
#define PLAYBACK 1    // Bit zero true if can play audio in the background.
#define MASSAGE  2    // Bit one is true if data is massaged.
#define FIXEDFREQ 4   // Bit two is true if driver plays at fixed frequency.
#define USESTIMER 8   // Bit three is true, if driver uses timer.
#define SHARESTIMER 16 // Bit 4, timer can be shared (BETA!!!!!)
#define LOOPEND 32		// bit 5, support looped samples, and pending sounds (BETA!!!)
#define STEREOPAN 64	// Bit 6, supports stereo panning.

typedef struct
{
  char far *sound;     // address of audio data.
  unsigned int sndlen; // Length of audio sample.
  int far  *IsPlaying; // Address of play status flag.
  int	   frequency;  // Playback frequency.
} SNDSTRUC;

int  far DigPlay(SNDSTRUC far *sndplay); // 688h -> Play 8 bit digitized sound.
int  far SoundStatus(void);  // 689h -> Report sound driver status.
void far MassageAudio(SNDSTRUC far *sndplay); // 68Ah -> Preformat 8 bit digitized sound.
void far DigPlay2(SNDSTRUC far *sndplay); // 68Bh -> Play preformatted data.
int  far AudioCapabilities(void); // 68Ch -> Report audio driver capabilities.
int  far DigPakIdentityString(char far *str); // 68Ch -> reports ID string of
					      // sound driver. returns string length.
int  far ReportSample(void); // 68Dh -> Report current sample address.
void far SetCallBackAddress(void far *proc); // 68Eh -> Set procedure callback address.
void far StopSound(void); // 68Fh -> Stop current sound from playing.
void far *far ReportCallbackAddress(void); // 691h -> report current callback address.
void far DigPlayLoop(SNDSTRUC far *sndplay);
int  far PostAudioPending(SNDSTRUC far *sndplay);

#define NOTPLAYING 0  // No sound is playing.
#define PLAYINGNOTPENDING 1 // Playing a sound, but no sound is pending.
#define PENDINGSOUND 2			// Playing, and a sound is pending.
int  far AudioPendingStatus(void);

#define FULLRIGHT 0
#define FULLLEFT 127
#define FRONTANDCENTER 64
int far SetStereoPan(int panvalue); // 0-127, 0 full right.
																		//			 64 full volume both.
																		//			127 full volume left.
#define PCM_8_MONO 0
#define PCM_8_STEREO 1
#define PCM_16_MONO 2
#define PCM_16_STEREO 3
int far SetPlayMode(int playmode);
// Return 0 if mode not available, 1 if mode set.

int far SetRecordMode(int mode);

/* Support routines */
void far WaitSound(void); // Wait until sound playback completed.
int  far CheckIn(void);   // Is sound driver available? 0 no, 1 yes.

/******************************************************************************/
/* Warning, it you enable LOADABLE_DRIVERS you must prodivde memory allocation*/
/* functions, and access to DOSCALLS.OBJ.				      */
/******************************************************************************/
#if LOADABLE_DRIVERS
int  far LoadSoundDriver(char far *name);  // Load a sound driver by filename, 1 success 0 fail.
void far UnloadSoundDriver(void); // Unload a previously loaded sound driver.
#endif
