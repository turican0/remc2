#include "engine_support.h"
#include "CommandLineParser.h"
#include <string>

#ifdef USE_DOSBOX
extern DOS_Device* DOS_CON;
#endif //USE_DOSBOX

const int printBufferSize = 4096;

//delete after finalization
uint8_t* readbuffer;

char* printbuffer;//char* buffer; // [esp+0h] [ebp-2h]
char* printbuffer2;//char v11; // [esp+40h] [ebp+3Eh]
/*int32_t x_DWORD_D41A4_x6x = 0;
int32_t x_DWORD_D41A4_x8x = 0;
int32_t x_DWORD_D41A4_xAx = -1;
int32_t x_DWORD_D41A4_xBx = -1;
int32_t x_DWORD_D41A4_xCx = -1;
int32_t x_DWORD_D41A4_xDx = -1;
char x_DWORD_D41A4_xB6 = 'C';//2A1644 b6=182
char x_DWORD_D41A4_x16x = '5';//2A15A4 16=22
uint8_t x_DWORD_D41A4_x17x = 0;
uint8_t x_DWORD_D41A4_x18x = 0;
char x_DWORD_D41A4_x19x=0;//2A51BD 19=25
uint8_t x_DWORD_D41A4_x1Ex = 0;
uint8_t x_DWORD_D41A4_x2Bx=0;
uint8_t x_DWORD_D41A4_x2Dx = 0;
int32_t x_DWORD_D41A4_x33x = 0;
int32_t x_DWORD_D41A4_x59x = 0;
int32_t x_DWORD_D41A4_x79x = 0;
int32_t x_DWORD_D41A4_x7Ax = 0;
int32_t x_DWORD_D41A4_x7Bx = 0;
int32_t x_DWORD_D41A4_x7Cx = 0;
int32_t x_DWORD_D41A4_x7Dx = 0;
int32_t x_DWORD_D41A4_x7Fx = 0;
//char* char_355198 = "8R5";
int32_t x_DWORD_D41A4_xB2 = 0;
int32_t x_DWORD_D41A4_xB4 = 0;
int32_t x_DWORD_D41A4_xB7 = 0;
int32_t x_DWORD_D41A4_xBA = 0;
int32_t x_DWORD_D41A4_xC0 = 0;
int32_t x_DWORD_D41A4_xCE = 0;
int32_t x_DWORD_D41A4_xCF = 0;
int32_t x_DWORD_D41A4_xCD = 0;
int32_t x_DWORD_D41A4_xD0 = 0;
int32_t x_DWORD_D41A4_xD8=0;
int32_t x_DWORD_D41A4_xDC = 0;
int32_t x_DWORD_D41A4_xE0 = -1;
int32_t x_DWORD_D41A4_xE1 = -1;
int32_t x_DWORD_D41A4_xE2=-1;
int32_t x_DWORD_D41A4_xE6 = -1;
int32_t x_DWORD_D41A4_xF2 = -1;
int32_t x_DWORD_D41A4_xF6 = -1;
int32_t x_DWORD_D41A4_x100 = -1;
int32_t x_DWORD_D41A4_x235 = -1;
int32_t x_DWORD_D41A4_x749 = -1;
int32_t x_DWORD_D41A4_x8CF = -1;
int32_t x_DWORD_D41A4_x94C = -1;
int32_t x_DWORD_D41A4_x954 = -1;
int32_t x_DWORD_D41A4_x21AA = -1;
int32_t x_DWORD_D41A4_x00 = -1;
int32_t x_DWORD_D41A4_x9602 = -1;
int32_t x_DWORD_D41A4_x9603 = -1;
int32_t x_DWORD_D41A4_x9677 = -1;
int32_t x_DWORD_D41A4_x967B = -1;
int32_t x_DWORD_D41A4_x967F = -1;
int32_t x_DWORD_D41A4_x4 = -1;
int32_t x_DWORD_D41A4_x965B = -1;
int32_t x_DWORD_D41A4_x966F = -1;
int32_t x_DWORD_D41A4_x9683 = -1;
int32_t x_DWORD_D41A4_x96BF = -1;
int32_t x_DWORD_D41A4_x9691 = -1;
int32_t x_DWORD_D41A4_x9692 = -1;*/

//int32_t x2124_x_DWORD_D41A4_xCx_x_DWORD_D41A0_11234 = 0;

//uint8_t* x_DWORD_E9C38_smalltit; // weak

//int32_t x_DWORD_D41A4 = -1;

//uint8_t* x_DWORD_D41A0; // weak

//uint8_t* x_D41A0_BYTEARRAY_0;
//12 - my be player counter(position of structure)
//11244 - players(my by creatures, every 2124 lenght)
//196302 - terrain input
//196308 - sky and blocks

//uint8_t* x_D41A0_BYTEARRAY_4;

type_x_D41A0_BYTEARRAY_4_struct x_D41A0_BYTEARRAY_4_struct;

int16_t x_D41A0_WORDARRAY[10000];

//uint32_t x_D41A0_BYTEARRAY_4_0xE6_heapsize;
//uint8_t* x_D41A0_BYTEARRAY_4_0xE2_heapbuffer;
//uint8_t* x_D41A0_BYTEARRAY_4_0xDE_heapbuffer;
//uint32_t* off_D918C[0x7c];//turn off - fix it

//xx uint8_t* dword_E9C30[1000]; // weak
/*
uint8_t x_BYTE_10B4E0_terraintype[0x10000]; // idb// x_BYTE_10B1E0[0x300]//2DC4E0 //map array1
uint8_t x_BYTE_11B4E0_height[0x10000]; // idb		//2EC4E0    	//map array2 // heightmap
uint8_t x_BYTE_12B4E0_shading[0x10000]; // fix it -  weak	//2FC4E0    //map array3
uint8_t x_BYTE_13B4E0_angle[0x10000]; // idb//30C4E0	//map array4 // water
int16_t x_WORD_15B4E0_source[0x10000]; // idb//32C4E0	//map array5
*/
type_array_str_E2A74 str_E2A74 {{//2b3a74
{0x0000,{0x0000,0x0000,0x0000,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000000,0x00,0x00},
{0x0001,{0x0004,0x011E,0x0032,0x0140,0x0050},0x00000000,0x00000000,0x00000000,0x00000258,0x02,0x00},
{0x0001,{0x0200,0x011F,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000258,0x02,0x00},
{0x0001,{0x0004,0x0120,0x0032,0x0140,0x0050},0x00000000,0x00000000,0x00000000,0x00000258,0x06,0x00},
{0x0001,{0x0024,0x0121,0x0032,0x0140,0x0050},0x00000000,0x00000000,0x00000000,0x0000012C,0x04,0x00},
{0x0001,{0x0220,0x0122,0x0032,0x01D6,0x0010},0x00000000,0x00000000,0x00000000,0x00000258,0x02,0x00},
{0x0001,{0x0404,0x0123,0x0032,0x0140,0x0050},0x00000000,0x00000000,0x00000000,0x00000258,0x02,0x00},
{0x0001,{0x0004,0x0124,0x0032,0x0140,0x0050},0x00000000,0x00000000,0x00000000,0x00000258,0x02,0x00},
{0x0001,{0x0004,0x0125,0x0032,0x0140,0x0050},0x00000000,0x00000000,0x00000000,0x00000258,0x02,0x00},
{0x0001,{0x0004,0x0126,0x0032,0x0140,0x0050},0x00000000,0x00000000,0x00000000,0x00000258,0x02,0x00},
{0x0001,{0x0624,0x0127,0x0032,0x0140,0x0050},0x00000000,0x00000000,0x00000000,0x00000258,0x05,0x00},
{0x0001,{0x0624,0x0128,0x0032,0x0140,0x0050},0x00000000,0x00000000,0x00000000,0x00000258,0x05,0x00},
{0x0001,{0x0624,0x0129,0x0032,0x0140,0x0050},0x00000000,0x00000000,0x00000000,0x00000258,0x05,0x00},
{0x0001,{0x0404,0x012A,0x0032,0x0140,0x0050},0x00000000,0x00000000,0x00000000,0x00000078,0x04,0x00},
{0x0001,{0x0404,0x012B,0x0032,0x0140,0x0050},0x00000000,0x00000000,0x00000000,0x00000258,0x05,0x00},
{0x0001,{0x0004,0x012C,0x0032,0x0140,0x0050},0x00000000,0x00000000,0x00000000,0x00000258,0x04,0x00},
{0x0001,{0x0004,0x012D,0x0032,0x0140,0x0050},0x00000000,0x00000000,0x00000000,0x00000258,0x04,0x00},
{0x0001,{0x0624,0x012E,0x0032,0x00D6,0x0010},0x00000000,0x00000000,0x00000000,0x00000190,0x05,0x00},
{0x0002,{0x0400,0x0132,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x000000A0,0x05,0x00},
{0x0002,{0x0400,0x0133,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x000000A0,0x05,0x00},
{0x0002,{0x0000,0x0134,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x000000A0,0x05,0x00},
{0x0002,{0x0400,0x0135,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000258,0x04,0x00},
{0x0002,{0x0000,0x0136,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000140,0x04,0x00},
{0x0002,{0x0000,0x0137,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x000000A0,0x05,0x00},
{0x0002,{0x0000,0x0138,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x000000A0,0x05,0x00},
{0x0002,{0x0000,0x0139,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x000000A0,0x05,0x00},
{0x0002,{0x0000,0x013A,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x000000A0,0x05,0x00},
{0x0002,{0x0000,0x013B,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000140,0x03,0x00},
{0x0002,{0x0000,0x013C,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x000000A0,0x05,0x00},
{0x0003,{0x0220,0x013D,0x0032,0x00D6,0x0020},0x00000000,0x00000000,0x00000000,0x00000320,0x02,0x00},
{0x0003,{0x0220,0x013E,0x0032,0x00D6,0x0010},0x00000000,0x00000000,0x00000000,0x00000320,0x02,0x00},
{0x0003,{0x0220,0x013F,0x0032,0x0082,0x0010},0x00000000,0x00000000,0x00000000,0x00000320,0x02,0x00},
{0x0003,{0x0220,0x0140,0x0032,0x0140,0x0020},0x00000000,0x00000000,0x00000000,0x00000320,0x02,0x00},
{0x0003,{0x0220,0x0141,0x0032,0x0104,0x0010},0x00000000,0x00000000,0x00000000,0x00000320,0x02,0x00},
{0x0003,{0x0220,0x0142,0x0032,0x0140,0x0010},0x00000000,0x00000000,0x00000000,0x00000320,0x02,0x00},
{0x0003,{0x0620,0x0143,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000320,0x02,0x00},
{0x0004,{0x0220,0x0144,0x0032,0x01D6,0x0010},0x00000000,0x00000000,0x00000000,0x00000320,0x02,0x03},
{0x0004,{0x0220,0x0145,0x0032,0x01D6,0x0020},0x00000000,0x00000000,0x00000000,0x00000320,0x02,0x03},
{0x0005,{0x0620,0x0146,0x0032,0x021C,0x0020},0x00000000,0x00000000,0x00000000,0x00000320,0x02,0x00},
{0x0005,{0x0620,0x0147,0x0032,0x0258,0x0020},0x00000000,0x00000000,0x00000000,0x00000320,0x02,0x00},
{0x0005,{0x0620,0x0148,0x0032,0x021C,0x0028},0x00000000,0x00000000,0x00000000,0x00000320,0x02,0x00},
{0x0005,{0x0620,0x0149,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000320,0x02,0x00},
{0x0005,{0x0220,0x014A,0x0032,0x0230,0x0010},0x00000000,0x00000000,0x00000000,0x00000320,0x02,0x00},
{0x0006,{0x0000,0x00A0,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000050,0x00,0x00},
{0x0006,{0x0000,0x00A1,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000050,0x00,0x00},
{0x0006,{0x0000,0x00A2,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000050,0x00,0x00},
{0x0006,{0x0000,0x00A3,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000050,0x00,0x00},
{0x0006,{0x0000,0x00A4,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000050,0x00,0x00},
{0x0006,{0x0000,0x00A5,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000050,0x00,0x00},
{0x0006,{0x0000,0x00A6,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000050,0x00,0x00},
{0x0006,{0x0000,0x00A7,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000050,0x00,0x00},
{0x0006,{0x0000,0x00A8,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000050,0x00,0x00},
{0x0006,{0x0000,0x00A9,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000050,0x00,0x00},
{0x0006,{0x0000,0x00AA,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000050,0x00,0x00},
{0x0006,{0x0000,0x00AB,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000050,0x00,0x00},
{0x0006,{0x0000,0x00AC,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000050,0x00,0x00},
{0x0006,{0x0000,0x00AD,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000050,0x00,0x00},
{0x0006,{0x0000,0x00AE,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000050,0x00,0x00},
{0x0006,{0x0000,0x00AF,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000050,0x00,0x00},
{0x0006,{0x0000,0x00B0,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000050,0x00,0x00},
{0x0006,{0x0000,0x00B1,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000050,0x00,0x00},
{0x0006,{0x0000,0x00B2,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000050,0x00,0x00},
{0x0006,{0x0000,0x00B3,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000050,0x00,0x00},
{0x0006,{0x0000,0x00B4,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000050,0x00,0x00},
{0x0006,{0x0000,0x00B5,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000050,0x00,0x00},
{0x0006,{0x0000,0x00B6,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000050,0x00,0x00},
{0x0006,{0x0000,0x00B7,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000050,0x00,0x00},
{0x0006,{0x0000,0x00B8,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000050,0x00,0x00},
{0x0006,{0x0000,0x00B9,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000050,0x00,0x00},
{0x0006,{0x0000,0x014B,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000050,0x00,0x00},
{0x0006,{0x0000,0x014C,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000050,0x00,0x00},
{0x0006,{0x0000,0x014D,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000050,0x00,0x00},
{0x0007,{0x0004,0x014E,0x0032,0x0140,0x0050},0x00000000,0x00000000,0x00000000,0x00000258,0x03,0x00},
{0x0007,{0x0004,0x014F,0x0032,0x0140,0x0050},0x00000000,0x00000000,0x00000000,0x00000258,0x03,0x00},
{0x0007,{0x0004,0x0150,0x0032,0x0140,0x0050},0x00000000,0x00000000,0x00000000,0x00000258,0x03,0x00},
{0x0007,{0x0004,0x0151,0x0032,0x0140,0x0050},0x00000000,0x00000000,0x00000000,0x00000258,0x03,0x00},
{0x0007,{0x0004,0x0152,0x0032,0x0140,0x0050},0x00000000,0x00000000,0x00000000,0x00000258,0x03,0x00},
{0x0007,{0x0004,0x0153,0x0032,0x0140,0x0050},0x00000000,0x00000000,0x00000000,0x00000258,0x03,0x00},
{0x0007,{0x0004,0x0154,0x0032,0x0140,0x0050},0x00000000,0x00000000,0x00000000,0x00000258,0x03,0x00},
{0x0007,{0x0004,0x0155,0x0032,0x0140,0x0050},0x00000000,0x00000000,0x00000000,0x00000258,0x03,0x00},
{0x0007,{0x0004,0x0156,0x0032,0x0140,0x0050},0x00000000,0x00000000,0x00000000,0x0000008C,0x04,0x00},
{0x0008,{0x0280,0x0157,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x000000A0,0x05,0x00},
{0x0008,{0x0400,0x0158,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x000000A0,0x05,0x00},
{0x0008,{0x0280,0x0159,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000064,0x05,0x00},
{0x0009,{0x0004,0x011E,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000000,0x00,0x00},
{0x000A,{0x0000,0x00BA,0x0046,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000000,0x00,0x00},
{0x000B,{0x0000,0x01A8,0x0000,0x0168,0x0072},0x00000000,0x00000000,0x00000000,0x00000000,0x00,0x00},
{0x000B,{0x0000,0x01A7,0x0000,0x0168,0x0092},0x00000000,0x00000000,0x00000000,0x00000000,0x00,0x00},
{0x000B,{0x0000,0x01AB,0x0000,0x0136,0x00B0},0x00000000,0x00000000,0x00000000,0x00000000,0x00,0x00},
{0x000B,{0x0000,0x01AA,0x0000,0x0168,0x00B0},0x00000000,0x00000000,0x00000000,0x00000000,0x00,0x00},
{0x000B,{0x0000,0x01AC,0x0000,0x0168,0x00D2},0x00000000,0x00000000,0x00000000,0x00000000,0x00,0x00},
{0x0001,{0x0004,0x017C,0x0032,0x0140,0x0050},0x00000000,0x00000000,0x00000000,0x00000064,0x04,0x00},
{0x0001,{0x0104,0x0000,0x0032,0x0140,0x0050},0x00000000,0x00000000,0x00000000,0x00000190,0x03,0x00},
{0x0001,{0x0004,0x012F,0x0032,0x0140,0x0050},0x00000000,0x00000000,0x00000000,0x00000000,0x01,0x00},
{0x0001,{0x0004,0x0130,0x0032,0x0140,0x0050},0x00000000,0x00000000,0x00000000,0x00000000,0x01,0x00},
{0x000C,{0x0000,0x0160,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000000,0x01,0x00},
{0x000C,{0x0100,0x0161,0x0032,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000000,0x01,0x00},
{0x000D,{0x0000,0x015A,0x0032,0x003C,0x0168},0x00000000,0x00000000,0x00000000,0x00000000,0x01,0x00},
{0x000D,{0x0000,0x015B,0x0032,0x008C,0x0170},0x00000000,0x00000000,0x00000000,0x00000000,0x01,0x00},
{0x000D,{0x0000,0x015C,0x0032,0x00D4,0x0170},0x00000000,0x00000000,0x00000000,0x00000000,0x01,0x00},
{0x000D,{0x0000,0x015D,0x0032,0x0116,0x0170},0x00000000,0x00000000,0x00000000,0x00000000,0x01,0x00},
{0x000D,{0x0000,0x015E,0x0032,0x0174,0x0170},0x00000000,0x00000000,0x00000000,0x00000000,0x01,0x00},
{0x000D,{0x0000,0x015F,0x0032,0x0198,0x0168},0x00000000,0x00000000,0x00000000,0x00000000,0x01,0x00},
{0x0000,{0x0000,0x0000,0x0000,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000000,0x00,0x00},
{0x0000,{0x0000,0x0000,0x0000,0x0000,0x0000},0x00000000,0x00000000,0x00000000,0x00000000,0x00,0x00},
}};
/*
uint8_t test_str_E2A74[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,
0x04,0x00,0x1E,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x58,0x02,
0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x02,0x02,0x01,0x00,0x00,0x02,
0x1F,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,
0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x02,0x02,0x01,0x00,0x04,0x00,0x20,0x01,
0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x00,0x00,
0x00,0x00,0x58,0x02,0x00,0x00,0x06,0x06,0x01,0x00,0x24,0x00,0x21,0x01,0x32,0x00,
0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x2C,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
0x2C,0x01,0x00,0x00,0x04,0x04,0x01,0x00,0x20,0x02,0x22,0x01,0x32,0x00,0xD6,0x01,
0x10,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,
0x00,0x00,0x02,0x02,0x01,0x00,0x04,0x04,0x23,0x01,0x32,0x00,0x40,0x01,0x50,0x00,
0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,
0x02,0x02,0x01,0x00,0x04,0x00,0x24,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,
0x00,0x00,0x58,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x02,0x02,
0x01,0x00,0x04,0x00,0x25,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,
0x58,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x02,0x02,0x01,0x00,
0x04,0x00,0x26,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x58,0x02,
0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x02,0x02,0x01,0x00,0x24,0x06,
0x27,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,
0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x05,0x05,0x01,0x00,0x24,0x06,0x28,0x01,
0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x00,0x00,
0x00,0x00,0x58,0x02,0x00,0x00,0x05,0x05,0x01,0x00,0x24,0x06,0x29,0x01,0x32,0x00,
0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x00,0x00,0x00,0x00,
0x58,0x02,0x00,0x00,0x05,0x05,0x01,0x00,0x04,0x04,0x2A,0x01,0x32,0x00,0x40,0x01,
0x50,0x00,0x00,0x00,0x00,0x00,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x00,
0x00,0x00,0x04,0x04,0x01,0x00,0x04,0x04,0x2B,0x01,0x32,0x00,0x40,0x01,0x50,0x00,
0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,
0x05,0x05,0x01,0x00,0x04,0x00,0x2C,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,
0x00,0x00,0x58,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x04,0x04,
0x01,0x00,0x04,0x00,0x2D,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,
0x58,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x04,0x04,0x01,0x00,
0x24,0x06,0x2E,0x01,0x32,0x00,0xD6,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x90,0x01,
0x00,0x00,0x00,0x00,0x00,0x00,0x90,0x01,0x00,0x00,0x05,0x05,0x02,0x00,0x00,0x04,
0x32,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0x05,0x05,0x02,0x00,0x00,0x04,0x33,0x01,
0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0xA0,0x00,0x00,0x00,0x05,0x05,0x02,0x00,0x00,0x00,0x34,0x01,0x32,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xA0,0x00,0x00,0x00,0x05,0x05,0x02,0x00,0x00,0x04,0x35,0x01,0x32,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,
0x00,0x00,0x04,0x04,0x02,0x00,0x00,0x00,0x36,0x01,0x32,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x40,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x01,0x00,0x00,
0x04,0x04,0x02,0x00,0x00,0x00,0x37,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0xA0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0x05,0x05,
0x02,0x00,0x00,0x00,0x38,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xA0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0x05,0x05,0x02,0x00,
0x00,0x00,0x39,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0x05,0x05,0x02,0x00,0x00,0x00,
0x3A,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0x05,0x05,0x02,0x00,0x00,0x00,0x3B,0x01,
0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x01,0x00,0x00,0x00,0x00,
0x00,0x00,0x40,0x01,0x00,0x00,0x03,0x03,0x02,0x00,0x00,0x00,0x3C,0x01,0x32,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xA0,0x00,0x00,0x00,0x05,0x05,0x03,0x00,0x20,0x02,0x3D,0x01,0x32,0x00,0xD6,0x00,
0x20,0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x03,
0x00,0x00,0x02,0x02,0x03,0x00,0x20,0x02,0x3E,0x01,0x32,0x00,0xD6,0x00,0x10,0x00,
0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,
0x02,0x02,0x03,0x00,0x20,0x02,0x3F,0x01,0x32,0x00,0x82,0x00,0x10,0x00,0x00,0x00,
0x00,0x00,0x20,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x02,0x02,
0x03,0x00,0x20,0x02,0x40,0x01,0x32,0x00,0x40,0x01,0x20,0x00,0x00,0x00,0x00,0x00,
0x20,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x02,0x02,0x03,0x00,
0x20,0x02,0x41,0x01,0x32,0x00,0x04,0x01,0x10,0x00,0x00,0x00,0x00,0x00,0x20,0x03,
0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x02,0x02,0x03,0x00,0x20,0x02,
0x42,0x01,0x32,0x00,0x40,0x01,0x10,0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,
0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x02,0x02,0x03,0x00,0x20,0x06,0x43,0x01,
0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x00,0x00,
0x00,0x00,0x20,0x03,0x00,0x00,0x02,0x02,0x04,0x00,0x20,0x02,0x44,0x01,0x32,0x00,
0xD6,0x01,0x10,0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x00,0x00,0x00,0x00,
0x20,0x03,0x00,0x00,0x02,0x03,0x04,0x00,0x20,0x02,0x45,0x01,0x32,0x00,0xD6,0x01,
0x20,0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x03,
0x00,0x00,0x02,0x03,0x05,0x00,0x20,0x06,0x46,0x01,0x32,0x00,0x1C,0x02,0x20,0x00,
0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,
0x02,0x02,0x05,0x00,0x20,0x06,0x47,0x01,0x32,0x00,0x58,0x02,0x20,0x00,0x00,0x00,
0x00,0x00,0x20,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x02,0x02,
0x05,0x00,0x20,0x06,0x48,0x01,0x32,0x00,0x1C,0x02,0x28,0x00,0x00,0x00,0x00,0x00,
0x20,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x02,0x02,0x05,0x00,
0x20,0x06,0x49,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x03,
0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x02,0x02,0x05,0x00,0x20,0x02,
0x4A,0x01,0x32,0x00,0x30,0x02,0x10,0x00,0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,
0x00,0x00,0x00,0x00,0x20,0x03,0x00,0x00,0x02,0x02,0x06,0x00,0x00,0x00,0xA0,0x00,
0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xA1,0x00,0x32,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xA2,0x00,0x32,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,
0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xA3,0x00,0x32,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,
0x00,0x00,0x06,0x00,0x00,0x00,0xA4,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,
0x06,0x00,0x00,0x00,0xA5,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,
0x00,0x00,0xA6,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,
0xA7,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xA8,0x00,
0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xA9,0x00,0x32,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xAA,0x00,0x32,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,
0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xAB,0x00,0x32,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,
0x00,0x00,0x06,0x00,0x00,0x00,0xAC,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,
0x06,0x00,0x00,0x00,0xAD,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,
0x00,0x00,0xAE,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,
0xAF,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xB0,0x00,
0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xB1,0x00,0x32,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xB2,0x00,0x32,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,
0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xB3,0x00,0x32,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,
0x00,0x00,0x06,0x00,0x00,0x00,0xB4,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,
0x06,0x00,0x00,0x00,0xB5,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,
0x00,0x00,0xB6,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,
0xB7,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xB8,0x00,
0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xB9,0x00,0x32,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x50,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x4B,0x01,0x32,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,
0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x4C,0x01,0x32,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,
0x00,0x00,0x06,0x00,0x00,0x00,0x4D,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,
0x07,0x00,0x04,0x00,0x4E,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,
0x58,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x03,0x06,0x07,0x00,
0x04,0x00,0x4F,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x58,0x02,
0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x03,0x06,0x07,0x00,0x04,0x00,
0x50,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,
0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x03,0x06,0x07,0x00,0x04,0x00,0x51,0x01,
0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x00,0x00,
0x00,0x00,0x58,0x02,0x00,0x00,0x03,0x06,0x07,0x00,0x04,0x00,0x52,0x01,0x32,0x00,
0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x00,0x00,0x00,0x00,
0x58,0x02,0x00,0x00,0x03,0x06,0x07,0x00,0x04,0x00,0x53,0x01,0x32,0x00,0x40,0x01,
0x50,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,
0x00,0x00,0x03,0x06,0x07,0x00,0x04,0x00,0x54,0x01,0x32,0x00,0x40,0x01,0x50,0x00,
0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,
0x03,0x06,0x07,0x00,0x04,0x00,0x55,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,
0x00,0x00,0x58,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x02,0x00,0x00,0x03,0x06,
0x07,0x00,0x04,0x00,0x56,0x01,0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,
0x8C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x8C,0x00,0x00,0x00,0x04,0x06,0x08,0x00,
0x80,0x02,0x57,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0x05,0x05,0x08,0x00,0x00,0x04,
0x58,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0x05,0x05,0x08,0x00,0x80,0x02,0x59,0x01,
0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x64,0x00,0x00,0x00,0x05,0x05,0x09,0x00,0x04,0x00,0x1E,0x01,0x32,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x0A,0x00,0x00,0x00,0xBA,0x00,0x46,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x0B,0x00,0x00,0x00,0xA8,0x01,0x00,0x00,0x68,0x01,0x72,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x0B,0x00,0x00,0x00,0xA7,0x01,0x00,0x00,0x68,0x01,0x92,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0B,0x00,0x00,0x00,0xAB,0x01,0x00,0x00,0x36,0x01,0xB0,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0B,0x00,
0x00,0x00,0xAA,0x01,0x00,0x00,0x68,0x01,0xB0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0B,0x00,0x00,0x00,
0xAC,0x01,0x00,0x00,0x68,0x01,0xD2,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x04,0x00,0x7C,0x01,
0x32,0x00,0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x64,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x64,0x00,0x00,0x00,0x04,0x04,0x01,0x00,0x04,0x01,0x00,0x00,0x32,0x00,
0x40,0x01,0x50,0x00,0x00,0x00,0x00,0x00,0x90,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
0x90,0x01,0x00,0x00,0x03,0x03,0x01,0x00,0x04,0x00,0x2F,0x01,0x32,0x00,0x40,0x01,
0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x01,0x01,0x01,0x00,0x04,0x00,0x30,0x01,0x32,0x00,0x40,0x01,0x50,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x01,0x01,0x0C,0x00,0x00,0x00,0x60,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,
0x0C,0x00,0x00,0x01,0x61,0x01,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x0D,0x00,
0x00,0x00,0x5A,0x01,0x32,0x00,0x3C,0x00,0x68,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x0D,0x00,0x00,0x00,
0x5B,0x01,0x32,0x00,0x8C,0x00,0x70,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x0D,0x00,0x00,0x00,0x5C,0x01,
0x32,0x00,0xD4,0x00,0x70,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x0D,0x00,0x00,0x00,0x5D,0x01,0x32,0x00,
0x16,0x01,0x70,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x01,0x01,0x0D,0x00,0x00,0x00,0x5E,0x01,0x32,0x00,0x74,0x01,
0x70,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x01,0x01,0x0D,0x00,0x00,0x00,0x5F,0x01,0x32,0x00,0x98,0x01,0x68,0x01,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x27,0x31,0x32,0x33,0x34,0x35,0x36,
0x37,0x38,0x39,0x30,0x2D,0x3D,0x08,0x09,0x51,0x57,0x45,0x52,0x54,0x59,0x55,0x49,
0x4F,0x50,0x5B,0x5D,0x0D,0x00,0x41,0x53,0x44,0x46,0x47,0x48,0x4A,0x4B,0x4C,0x3B,
0x27,0x23,0x00,0x5C,0x5A,0x58,0x43,0x56,0x42,0x4E,0x4D,0x2C,0x2E,0x2F,0x00,0x00,
0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x2D,0x00,0x00,0x00,0x2B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2F,0x00,0x00,0x28,0x29,0x2F,0x2A,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2E,0x0D,0x00,0x40,0x01,0xC8,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x01,0xC8,0x00,0x40,0x01,0xC8,0x00,
0x19,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x84,0x2F,0x2A,0x00,0x90,0x2F,0x2A,0x00,
0x9C,0x2F,0x2A,0x00,0xA8,0x2F,0x2A,0x00,0xB8,0x2F,0x2A,0x00,0xC8,0x2F,0x2A,0x00,
0xD4,0x2F,0x2A,0x00,0xE0,0x2F,0x2A,0x00,0xEC,0x2F,0x2A,0x00,0x00,0x00,0x00,0x00,
0x0A,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x09,0x00,0xFC,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x7F,0x00,0x00,0x00,
0x36,0x03,0x36,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x30,0x2A,0x00,
0xAC,0x30,0x2A,0x00,0xB8,0x30,0x2A,0x00,0xC4,0x30,0x2A,0x00,0xD0,0x30,0x2A,0x00,
0xDC,0x30,0x2A,0x00,0xE8,0x30,0x2A,0x00,0xF8,0x30,0x2A,0x00,0x04,0x31,0x2A,0x00,
0x0C,0x31,0x2A,0x00,0x18,0x31,0x2A,0x00,0x28,0x31,0x2A,0x00,0x34,0x31,0x2A,0x00,
0x00,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x01,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x00,0x00,0x69,0x6E,0x74,0x72,0x6F,0x5C,0x69,0x6E,0x74,0x72,0x6F,0x2E,
0x64,0x61,0x74,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xC2,0x03,0x00,0x63,0xD4,0x03,0x00,0x5F,0xD4,0x03,0x01,0x4F,0xD4,0x03,0x02,0x50,
0xD4,0x03,0x03,0x82,0xD4,0x03,0x04,0x54,0xD4,0x03,0x05,0x80,0xD4,0x03,0x06,0xBF,
0xD4,0x03,0x07,0x1F,0xD4,0x03,0x08,0x00,0xD4,0x03,0x09,0x40,0xD4,0x03,0x10,0x9C,
0xD4,0x03,0x11,0x8E,0xD4,0x03,0x12,0x8F,0xD4,0x03,0x13,0x28,0xD4,0x03,0x14,0x00,
0xD4,0x03,0x15,0x96,0xD4,0x03,0x16,0xB9,0xD4,0x03,0x17,0xE3,0xC4,0x03,0x01,0x01,
0xC4,0x03,0x04,0x06,0xCE,0x03,0x05,0x40,0xCE,0x03,0x06,0x05,0xC0,0x03,0x10,0x41,
0xC0,0x03,0x13,0x00,0x00,0x00,0x0A,0x00,0x50,0x00,0x0A,0x00,0x00,0x80,0x0A,0x00,
0x50,0x80,0x0A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2F,0x6E,0x65,0x74,
0x68,0x65,0x72,0x77,0x2F,0x73,0x6F,0x75,0x6E,0x64,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
0x03,0x00,0x01,0x00,0x07,0x00,0x03,0x00,0x07,0x00,0x07,0x00,0x1F,0x00,0x0F,0x00,
0x3F,0x00,0x1F,0x00,0x3F,0x00,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,
0x01,0x02,0x00,0x00,0x02,0x03,0x00,0x00,0x03,0x03,0x00,0x00,0x04,0x05,0x00,0x00,
0x05,0x06,0x00,0x00,0x06,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
0x07,0x00,0x02,0x00,0x07,0x00,0x06,0x00,0x07,0x00,0x01,0x00,0x07,0x00,0x05,0x00,
0x0F,0x00,0x03,0x00,0x0F,0x00,0x0B,0x00,0x1F,0x00,0x07,0x00,0x1F,0x00,0x17,0x00,
0x3F,0x00,0x0F,0x00,0x3F,0x00,0x2F,0x00,0x3F,0x00,0x1F,0x00,0x7F,0x00,0x3F,0x00
};*/

uint8_t* pdwScreenBuffer_351628; //351628

uint8_t* off_D41A8_sky;//graphics buffer// = (uint8_t*)&x_BYTE_14B4E0; // weak
uint8_t* x_BYTE_14B4E0_second_heightmap;//31C4E0

posistruct_t* xy_DWORD_17DED4_spritestr;
posistruct_t* xy_DWORD_17DEC0_spritestr;
posistruct_t* xy_DWORD_17DEC8_spritestr;

posistruct_t* x_DWORD_D4188t_spritestr;

posistruct_t* xy_DWORD_17DEC0_spritestr_orig;

doublebyte doublebyte_conv(uint16_t a2) {
	doublebyte result;
	result.byte1 = a2 & 0xff;
	result.byte2 = (a2 & 0xff00) >> 8;
	return result;
};

uint8_t* pre_pdwScreenBuffer_351628;

void allert_error() {
	int a = 10;
	int b = 0;
	int c = a / b;//this is generate error
}

void support_begin() {
	readbuffer = (uint8_t*)malloc(1000000);//fix it max 64000
	printbuffer = (char*)malloc(printBufferSize);
	//printbuffer[0] = '\0';
	printbuffer2 = (char*)malloc(printBufferSize);

	//pre_pdwScreenBuffer_351628 = (uint8_t*)malloc(2228224);// 640x480
	//pdwScreenBuffer_351628 = &pre_pdwScreenBuffer_351628[1114112];// 640x480

	pre_pdwScreenBuffer_351628 = (uint8_t*)malloc(16588800); // (1920x1080 * 4) * 2
	pdwScreenBuffer_351628 = &pre_pdwScreenBuffer_351628[8294400]; // 1920x1080 * 4

	//x_DWORD_E9C38_smalltit= (uint8_t*)malloc(64000);
	//x_D41A0_BYTEARRAY_4_0xDE_heapbuffer= (uint8_t*)malloc(64000);

	/*for (int i = 0;i < 0x1c+0x60;i++)
		off_D918C[i] = new uint32_t;*/
		//2aa18c
		//0 2bc394
		//1
		//2

		/*xx dword_E9C30[0] = new uint8_t[4096];
		for (int i = 0;i <4096;i++)
			dword_E9C30[0][0] = 0;
		dword_E9C30[2] = new uint8_t[4096];
		dword_E9C30[4] = new uint8_t[4096];*/
		//x_D41A0_BYTEARRAY_4_struct.player_name_57 =new char[256];
		//x_D41A0_BYTEARRAY_4_struct.savestring_89 = new char[256];

	x_BYTE_14B4E0_second_heightmap = new uint8_t[65536];
	off_D41A8_sky = new uint8_t[65536];
	memcpy(off_D41A8_sky, &x_BYTE_14B4E0_second_heightmap, 4);

	xy_DWORD_17DED4_spritestr = new posistruct_t[1000];
	xy_DWORD_17DEC0_spritestr_orig = new posistruct_t[1000];
	xy_DWORD_17DEC0_spritestr = xy_DWORD_17DEC0_spritestr_orig;
	xy_DWORD_17DEC8_spritestr = new posistruct_t[1000];

	x_DWORD_D4188t_spritestr = new posistruct_t[1000];
	//x_D41A0_BYTEARRAY_4_struct.player_name_57 = 0;

	//printbuffer2[0] = '\0';
}
void support_end() {
	if (readbuffer)free(readbuffer);
	if (printbuffer)free(printbuffer);//char* buffer; // [esp+0h] [ebp-2h]
	if (printbuffer2)free(printbuffer2);//char v11; // [esp+40h] [ebp+3Eh]
	if (pre_pdwScreenBuffer_351628)free(pre_pdwScreenBuffer_351628);
	//free(x_DWORD_E9C38_smalltit);
	/*for (int i = 0;i < 0x1c;i++)
		free(off_D918C[i]);*/
		//free(x_D41A0_BYTEARRAY_4_0xDE_heapbuffer);
		/*xx free(dword_E9C30[0]);
		free(dword_E9C30[2]);
		free(dword_E9C30[4]);*/
		//free(x_D41A0_BYTEARRAY_4_struct.player_name_57);
		//if(x_D41A0_BYTEARRAY_4_struct.savestring_89)delete(x_D41A0_BYTEARRAY_4_struct.savestring_89);

	if (x_BYTE_14B4E0_second_heightmap) delete[](x_BYTE_14B4E0_second_heightmap);
	if (off_D41A8_sky) delete[](off_D41A8_sky);

	if (xy_DWORD_17DED4_spritestr) delete[](xy_DWORD_17DED4_spritestr);
	if (xy_DWORD_17DEC0_spritestr_orig) delete[](xy_DWORD_17DEC0_spritestr_orig);//fixed
	if (xy_DWORD_17DEC8_spritestr) delete[](xy_DWORD_17DEC8_spritestr);

	if (x_DWORD_D4188t_spritestr) delete[](x_DWORD_D4188t_spritestr);
}

void loadfromsnapshot(const char* filename, uint8_t* adress, uint32_t adressdos, uint32_t size) {
	char findnamec[500];
	FILE* fptestepc;
	sprintf(findnamec, "../remc2/memimages/engine-memory-%s", filename);
	fptestepc = fopen(findnamec, "rb");
	fseek(fptestepc, adressdos, SEEK_SET);
	fread(adress, size, 1, fptestepc);
	fclose(fptestepc);
};

void loadfromsnapshot2(const char* filename, uint8_t* adress, uint32_t adressdos, uint32_t size) {
	char findnamec[500];
	FILE* fptestepc;
	uint32_t subadress;
	sprintf(findnamec, "../remc2/memimages/engine-memory-%s", filename);
	fptestepc = fopen(findnamec, "rb");
	fseek(fptestepc, adressdos, SEEK_SET);
	fread(&subadress, 4, 1, fptestepc);
	fseek(fptestepc, subadress, SEEK_SET);
	fread(adress, size, 1, fptestepc);

	fclose(fptestepc);
};

uint32_t compare_with_snapshot(const char* filename, uint8_t* adress, uint32_t adressdos, uint32_t size, uint8_t* origbyte, uint8_t* copybyte) {
	char findnamec[500];
	uint8_t* buffer = (uint8_t*)malloc(size);
	FILE* fptestepc;
	sprintf(findnamec, "c:/prenos/remc2/remc2/memimages/engine-memory-%s", filename);
	fptestepc = fopen(findnamec, "rb");
	if (fptestepc == NULL)
	{
		mydelay(100);
		fptestepc = fopen(findnamec, "rb");
	}
	fseek(fptestepc, adressdos, SEEK_SET);

	fread(buffer, size, 1, fptestepc);
	uint32_t i;
	for (i = 0; i < size; i++)
	{
		if (buffer[i] != adress[i])
		{
			*origbyte = buffer[i];
			*copybyte = adress[i];
			break;
		}
	}

	free(buffer);
	fclose(fptestepc);
	return(i);
};
int test_E7EE0_id_pointer(uint32_t adress) {
	if ((adress >= 0x28) && (adress < 0x29))return 1;
	return 0;
}

int test_D41A0_4_id_pointer(uint32_t adress) {
	if ((adress >= 0xe2) && (adress < 0xe3))return 1;
	if ((adress >= 0x954) && (adress < 0x95a))return 2;
	return 0;
}
int test_EA3E4_id_pointer(uint32_t adress) {
	if ((adress >= 0x0) && (adress < 0x1))return 1;
	if ((adress >= 0xa0) && (adress < 0xa1))return 1;
	if ((adress >= 0xa4) && (adress < 0xa5))return 1;
	return 0;
}

int test_0x6E8E_id_pointer(uint32_t adress) {
	if ((adress >= 0x0) && (adress < 0x1))return 1;
	if ((adress >= 0xa0) && (adress < 0xa1))return 1;
	if ((adress >= 0xa4) && (adress < 0xa5))return 1;
	return 0;
}
int test_D41A0_id_pointer(uint32_t adress) {
	if ((adress >= 0x2fc4) && (adress < 0x2fc5))return 2;//event

	if ((adress >= 0x314d) && (adress < 0x3151))return 2;//clock - 4 bytes
	if ((adress >= 0x3999) && (adress < 0x399d))return 2;//clock2 - 4 bytes
	if ((adress >= 0x41e5) && (adress < 0x41e9))return 2;//clock3 - 4 bytes
	if ((adress >= 0x4a31) && (adress < 0x4a35))return 2;//clock4 - 4 bytes
	if ((adress >= 0x527d) && (adress < 0x5281))return 2;//clock5 - 4 bytes
	if ((adress >= 0x5ac9) && (adress < 0x5acd))return 2;//clock6 - 4 bytes
	if ((adress >= 0x6315) && (adress < 0x6319))return 2;//clock7 - 4 bytes
	if ((adress >= 0x6b61) && (adress < 0x6b65))return 2;//clock8 - 4 bytes

	if ((adress >= 0x235) && (adress < 0x236))return 2;//music

	if ((adress >= 0x246) && (adress < 0x2186))return 1;

	if ((adress >= 0x36552) && (adress < 0x36553))return 1;
	if ((adress >= 0x3655c) && (adress < 0x3655d))return 1;
	if ((adress >= 0x3655f) && (adress < 0x36560))return 1;
	if ((adress >= 0x36566) && (adress < 0x36567))return 1;
	if ((adress >= 0x36570) && (adress < 0x36571))return 1;
	if ((adress >= 0x36608) && (adress < 0x36609))return 1;
	//if ((adress >= 0x36625) && (adress < 0x36626))return 1;
	if ((adress >= 0x36628) && (adress < 0x36630))return 1;

	/*if ((adress >= 0x36b36) && (adress < 0x36b37))return 1;
	if ((adress >= 0x36b5d) && (adress < 0x36b5e))return 1;
	if ((adress >= 0x36b84) && (adress < 0x36b85))return 1;
	if ((adress >= 0x36bab) && (adress < 0x36bac))return 1;
	if ((adress >= 0x36bd2) && (adress < 0x36bd3))return 1;
	*/
	for (int j = 1; j < 50; j++)
	{
		if ((adress >= 0x3664C + 0xa + 39 * j) && (adress < 0x3664C + 0xa + 1 + 39 * j))return 1;
	}

	/*if ((adress >= 0x36656) && (adress < 0x36657))return 1;
	if ((adress >= 0x3667d) && (adress < 0x3667e))return 1;
	if ((adress >= 0x366a4) && (adress < 0x366a5))return 1;
	if ((adress >= 0x366cb) && (adress < 0x366cc))return 1;
	if ((adress >= 0x366f2) && (adress < 0x366f3))return 1;
	if ((adress >= 0x36719) && (adress < 0x3671a))return 1;
	if ((adress >= 0x36740) && (adress < 0x36741))return 1;
	if ((adress >= 0x36767) && (adress < 0x36768))return 1;
	if ((adress >= 0x3678e) && (adress < 0x3678f))return 1;*/
	if ((adress >= 0x36620) && (adress < 0x36621))return 1;
	for (uint32_t i = 0; i < 32; i++) {
		if ((adress >= 0x36656 + i * 39) && (adress < 0x36657 + i * 39))return 1;
	}
	/*if ((adress >= 0x6f32) && (adress < 0x6f37))return 1;
	if ((adress >= 0x6fd6) && (adress < 0x6fdb))return 1;
	if ((adress >= 0x707e) && (adress < 0x707f))return 1;
	if ((adress >= 0x7082) && (adress < 0x7083))return 1;
	if ((adress >= 0x7126) && (adress < 0x712b))return 1;
	if ((adress >= 0x71ce) && (adress < 0x71cf))return 1;
	if ((adress >= 0x71d2) && (adress < 0x71d3))return 1;
	if ((adress >= 0x7276) && (adress < 0x7277))return 1;
	if ((adress >= 0x727a) && (adress < 0x727b))return 1;
	if ((adress >= 0x731e) && (adress < 0x731f))return 1;
	if ((adress >= 0x7322) && (adress < 0x7323))return 1;
	if ((adress >= 0x73c6) && (adress < 0x73c7))return 1;
	if ((adress >= 0x73ca) && (adress < 0x73cb))return 1;
	if ((adress >= 0x746e) && (adress < 0x746f))return 1;
	if ((adress >= 0x7472) && (adress < 0x7473))return 1;
	if ((adress >= 0x7516) && (adress < 0x7517))return 1;
	if ((adress >= 0x751a) && (adress < 0x751b))return 1;
	if ((adress >= 0x75be) && (adress < 0x75bf))return 1;
	if ((adress >= 0x75c2) && (adress < 0x75c3))return 1;
	if ((adress >= 0x7666) && (adress < 0x7667))return 1;
	if ((adress >= 0x766a) && (adress < 0x766b))return 1;
	if ((adress >= 0x770e) && (adress < 0x770f))return 1;
	if ((adress >= 0x7712) && (adress < 0x7713))return 1;
	if ((adress >= 0x77b6) && (adress < 0x77b7))return 1;
	if ((adress >= 0x77ba) && (adress < 0x77bb))return 1;
	if ((adress >= 0x785e) && (adress < 0x7863))return 1;
	if ((adress >= 0x7906) && (adress < 0x790b))return 1;
	if ((adress >= 0x79ae) && (adress < 0x79b3))return 1;
	if ((adress >= 0x7a56) && (adress < 0x7a5b))return 1;
	if ((adress >= 0x7afe) && (adress < 0x7b03))return 1;*/
	for (uint32_t i = 0; i < 0x3e8; i++) {
		if ((adress >= 0x6f2e + i * 168) && (adress < 0x6f37 + i * 168))return 1;
	}
	if ((adress >= 0x36df6) && (adress < 0x36df7))return 1;
	return 0;
}

int test_E2A74_id_pointer(uint32_t adress) {
	//int offset = adress % 30;
	//if (offset == 12 || offset == 13)
	//	return 1;

	if ((adress >= 0x246) && (adress < 0x247))return 1;
	if ((adress >= 0x282) && (adress < 0x283))return 1;
	if ((adress >= 0x2a0) && (adress < 0x2a1))return 1;

	return 0;
}

int test_222BD3_id_pointer(uint32_t adress) {
	if ((adress >= 0x8) && (adress < 0x9))return 1;
	if ((adress >= 0x50) && (adress < 0x51))return 1;
	if ((adress >= 0x68) && (adress < 0x69))return 1;

	return 0;
}

uint32_t compare_with_snapshot_D41A0(const char* filename, uint8_t* adress, uint32_t adressdos, uint32_t size, uint8_t* origbyte, uint8_t* copybyte) {
	char findnamec[500];
	uint8_t* buffer = (uint8_t*)malloc(size);
	FILE* fptestepc;
	sprintf(findnamec, "c:/prenos/dosbox-x-remc2/vs2015/engine-memory-%s", filename);
	fptestepc = fopen(findnamec, "rb");
	if (fptestepc == NULL)
	{
		mydelay(100);
		fptestepc = fopen(findnamec, "rb");
	}
	fseek(fptestepc, adressdos, SEEK_SET);

	fread(buffer, size, 1, fptestepc);
	uint32_t i;
	bool testa, testb;
	for (i = 0; i < size; i++)
	{
		int testx = test_D41A0_id_pointer(i);
		if (testx == 1)
		{
			if (*(uint32_t*)&buffer[i])testa = true;
			else testa = false;
			if (*(uint32_t*)&adress[i])testb = true;
			else testb = false;
			if (testa != testb)
			{
				*origbyte = buffer[i];
				*copybyte = adress[i];
				break;
			}
			i += 3;
		}
		else if (testx == 0) {
			if (buffer[i] != adress[i])
			{
				*origbyte = buffer[i];
				*copybyte = adress[i];
				break;
			}
		}
	}

	free(buffer);
	fclose(fptestepc);

	if (i < size) {
		std::cout << "Regression compare sequence error @ function " << __FUNCTION__ << ", line " << __LINE__ << ": " << i << std::endl;
	}
	return(i);
};

uint32_t compare_with_sequence_E7EE0(const char* filename, uint8_t* adress, uint32_t  /*adressdos*/, uint32_t count, uint32_t size1, uint32_t size2, uint8_t* origbyte, uint8_t* copybyte, long offset) {
	std::string finddir;
	uint8_t* buffer = (uint8_t*)malloc(size2);
	FILE* fptestepc;
	finddir = CommandLineParams.GetMemimagesPath() + std::string("regressions");
	std::string finddir2 = GetSubDirectoryPath("", "");
	std::string findname = finddir2 + finddir + std::string("/sequence-") + filename + ".bin";
	fptestepc = fopen(findname.c_str(), "rb");
	if (fptestepc == NULL)
	{
		mydelay(100);
		fptestepc = fopen(findname.c_str(), "rb");
	}
	fseek(fptestepc, count * size1 + offset, SEEK_SET);

	fread(buffer, size2, 1, fptestepc);
	uint32_t i;
	bool testa, testb;
	//int diffindex = 0;
	for (i = 0; i < size2; i++)
	{
		int testx = test_E7EE0_id_pointer(i);
		if (testx == 1)
		{
			if (*(uint32_t*)&buffer[i])testa = true;
			else testa = false;
			if (*(uint32_t*)&adress[i])testb = true;
			else testb = false;
			if (testa != testb)
			{
				*origbyte = buffer[i];
				*copybyte = adress[i];
				break;
			}
			i += 3;
		}
		else if (testx == 0) {
			if (buffer[i] != adress[i])
			{
				*origbyte = buffer[i];
				*copybyte = adress[i];
				break;
			}
		}
	}

	free(buffer);
	fclose(fptestepc);

	if (i < size2) {
		std::cout << "Regression compare sequence error @ function " << __FUNCTION__ << ", line " << __LINE__ << ": " << i << std::endl;
	}
	return(i);
};

uint32_t compare_with_sequence_D41A0(const char* filename, uint8_t* adress, uint32_t  /*adressdos*/, uint32_t count, uint32_t size, uint8_t* origbyte, uint8_t* copybyte, long offset, bool regressions) {
	std::string finddir;
	uint8_t* buffer = (uint8_t*)malloc(size);
	FILE* fptestepc;
	if (regressions)
		finddir = CommandLineParams.GetMemimagesPath() + std::string("regressions");
	else
		finddir = std::string("../../dosbox-x-remc2/vs2015");
	std::string finddir2 = GetSubDirectoryPath("", "");
	std::string findname = finddir2 + finddir + std::string("/sequence-") + filename + ".bin";
	fptestepc = fopen(findname.c_str(), "rb");
	if (fptestepc == NULL)
	{
		mydelay(100);
		fptestepc = fopen(findname.c_str(), "rb");
	}
	fseek(fptestepc, count * size + offset, SEEK_SET);

	fread(buffer, size, 1, fptestepc);
	uint32_t i;
	bool testa, testb;
	for (i = 0; i < size; i++)
	{
		int testx = test_D41A0_id_pointer(i);
		if (testx == 1)
		{
			if (*(uint32_t*)&buffer[i])testa = true;
			else testa = false;
			if (*(uint32_t*)&adress[i])testb = true;
			else testb = false;
			if (testa != testb)
			{
				*origbyte = buffer[i];
				*copybyte = adress[i];
				break;
			}
			i += 3;
		}
		else if (testx == 0) {
			if (buffer[i] != adress[i])
			{
				*origbyte = buffer[i];
				*copybyte = adress[i];
				break;
			}
		}
	}

	if (i < size) {
		std::cout << "Regression compare sequence error @ function " << __FUNCTION__ << ", line " << __LINE__ << ": " << i << std::endl;
		allert_error();
	}
	free(buffer);
	fclose(fptestepc);
	return(i);
};

uint32_t compare_0x6E8E(const char* filename, uint8_t* adress, uint32_t count, uint32_t size, uint8_t* origbyte, uint8_t* copybyte, long offset) {
	char findnamec[500];
	uint8_t* buffer = (uint8_t*)malloc(size);
	FILE* fptestepc;
	sprintf(findnamec, "c:/prenos/dosbox-x-remc2/vs2015/sequence-%s.bin", filename);
	fptestepc = fopen(findnamec, "rb");
	if (fptestepc == NULL)
	{
		mydelay(100);
		fptestepc = fopen(findnamec, "rb");
	}
	fseek(fptestepc, count * size + offset, SEEK_SET);

	fread(buffer, size, 1, fptestepc);
	uint32_t i;
	bool testa, testb;
	for (i = 0; i < size; i++)
	{
		int testx = test_0x6E8E_id_pointer(i);
		if (testx == 1)
		{
			if (*(uint32_t*)&buffer[i])testa = true;
			else testa = false;
			if (*(uint32_t*)&adress[i])testb = true;
			else testb = false;
			if (testa != testb)
			{
				*origbyte = buffer[i];
				*copybyte = adress[i];
				break;
			}
			i += 3;
		}
		else if (testx == 0) {
			if (buffer[i] != adress[i])
			{
				*origbyte = buffer[i];
				*copybyte = adress[i];
				break;
			}
		}
	}

	free(buffer);
	fclose(fptestepc);
	if (i < size) {
		std::cout << "Regression compare sequence error @ function " << __FUNCTION__ << ", line " << __LINE__ << ": " << i << std::endl;
		allert_error();
	}
	return(i);
};

uint32_t compare_with_sequence_EA3E4(const char* filename, type_event_0x6E8E** adress, uint32_t count, uint32_t size, uint8_t* origbyte, uint8_t* copybyte) {
	std::string finddir;
	uint8_t* buffer = (uint8_t*)malloc(size * 0x3E9);
	FILE* fptestepc;
	finddir = CommandLineParams.GetMemimagesPath() + std::string("regressions");
	std::string finddir2 = GetSubDirectoryPath("", "");
	std::string findname = finddir2 + finddir + std::string("/sequence-") + filename + ".bin";
	fptestepc = fopen(findname.c_str(), "rb");
	if (fptestepc == NULL)
	{
		mydelay(100);
		fptestepc = fopen(findname.c_str(), "rb");
	}
	fseek(fptestepc, count * size * 0x3E9/* + offset*/, SEEK_SET);

	fread(buffer, size * 0x3E9, 1, fptestepc);

	for (int ea = 0; ea < 0x3E9; ea++)
	{
		uint32_t i;
		bool testa, testb;
		for (i = 0; i < size; i++)
		{
			int testx = test_EA3E4_id_pointer(i);
			if (testx == 1)
			{
				if (*(uint32_t*)&buffer[i + ea * size])testa = true;
				else testa = false;
				if (*(uint32_t*)((uint8_t*)adress[ea] + i))testb = true;
				else testb = false;
				if (testa != testb)
				{
					*origbyte = buffer[i + ea * size];
					*copybyte = *((uint8_t*)adress[ea] + i);
					break;
				}
				i += 3;
			}
			else if (testx == 0) {
				if (buffer[i + ea * size] != *((uint8_t*)adress[ea] + i))
				{
					*origbyte = buffer[i + ea * size];
					*copybyte = *((uint8_t*)adress[ea] + i);
					break;
				}
			}
		}
		if (i < size) {
			std::cout << "Regression compare sequence error @ function " << __FUNCTION__ << ", line " << __LINE__ << ": " << i << std::endl;
			allert_error();
		}
	}

	free(buffer);

	fclose(fptestepc);

	return(1);
};

uint32_t compare_with_sequence_D41A0_4(const char* filename, uint8_t* adress, uint32_t  /*adressdos*/, uint32_t count, uint32_t size, uint8_t* origbyte, uint8_t* copybyte, long offset) {
	std::string finddir;
	uint8_t* buffer = (uint8_t*)malloc(size);
	FILE* fptestepc;
	finddir = CommandLineParams.GetMemimagesPath() + std::string("regressions");
	std::string finddir2 = GetSubDirectoryPath("", "");
	std::string findname = finddir2 + finddir + std::string("/sequence-") + filename + ".bin";
	fptestepc = fopen(findname.c_str(), "rb");
	if (fptestepc == NULL)
	{
		mydelay(100);
		fptestepc = fopen(findname.c_str(), "rb");
	}
	fseek(fptestepc, count * size + offset, SEEK_SET);

	fread(buffer, size, 1, fptestepc);
	uint32_t i;
	bool testa, testb;
	for (i = 0; i < size; i++)
	{
		int testx = test_D41A0_4_id_pointer(i);
		if (testx == 1)
		{
			if (*(uint32_t*)&buffer[i])testa = true;
			else testa = false;
			if (*(uint32_t*)&adress[i])testb = true;
			else testb = false;
			if (testa != testb)
			{
				*origbyte = buffer[i];
				*copybyte = adress[i];
				break;
			}
			i += 3;
		}
		else if (testx == 0) {
			if (buffer[i] != adress[i])
			{
				*origbyte = buffer[i];
				*copybyte = adress[i];
				break;
			}
		}
	}

	free(buffer);
	fclose(fptestepc);
	if (i < size) {
		std::cout << "Regression compare sequence error @ function " << __FUNCTION__ << ", line " << __LINE__ << ": " << i << std::endl;
		allert_error();
	}
	return(i);
};

int test_F2C20ar_id_pointer(uint32_t adress) {
	if ((adress >= 0x8) && (adress < 0x9))return 1;
	return 0;
}

uint32_t compare_with_sequence_x_DWORD_F2C20ar(const char* filename, uint8_t* adress, uint32_t  /*adressdos*/, uint32_t count, uint32_t size, uint8_t* origbyte, uint8_t* copybyte, int* posdiff) {
	std::string finddir;
	uint8_t* buffer = (uint8_t*)malloc(size);
	FILE* fptestepc;
	finddir = CommandLineParams.GetMemimagesPath() + std::string("regressions");
	std::string finddir2 = GetSubDirectoryPath("", "");
	std::string findname = finddir2 + finddir + std::string("/sequence-") + filename + ".bin";
	fptestepc = fopen(findname.c_str(), "rb");
	if (fptestepc == NULL)
	{
		mydelay(100);
		fptestepc = fopen(findname.c_str(), "rb");
	}
	fseek(fptestepc, count * size, SEEK_SET);

	fread(buffer, size, 1, fptestepc);
	uint32_t i;
	bool testa, testb;
	int diffindex = 0;
	for (i = 0; i < size; i++)
	{
		int testx = test_F2C20ar_id_pointer(i);
		if (testx == 1)
		{
			if (*(uint32_t*)&buffer[i])testa = true;
			else testa = false;
			if (*(uint32_t*)&adress[i])testb = true;
			else testb = false;
			if (testa != testb)
			{
				posdiff[diffindex] = i;
				origbyte[diffindex] = buffer[i];
				copybyte[diffindex++] = adress[i];
				if (diffindex >= 100)break;
			}
			i += 3;
		}
		else if (testx == 0) {
			if (buffer[i] != adress[i])
			{
				posdiff[diffindex] = i;
				origbyte[diffindex] = buffer[i];
				copybyte[diffindex++] = adress[i];
				if (diffindex >= 100)break;
			}
		}
	}

	free(buffer);
	fclose(fptestepc);

	if (i < size) {
		std::cout << "Regression compare sequence error @ function " << __FUNCTION__ << ", line " << __LINE__ << ": " << i << std::endl;
	}
	return(diffindex);
};

uint32_t compare_with_sequence_array_E2A74(const char* filename, uint8_t* adress, uint32_t  /*adressdos*/, uint32_t count, uint32_t size1, uint32_t size2, uint8_t* origbyte, uint8_t* copybyte, long offset, bool regressions) {
	std::string finddir;
	uint8_t* buffer = (uint8_t*)malloc(size2);
	FILE* fptestepc;
	if (regressions)
		finddir = CommandLineParams.GetMemimagesPath() + std::string("regressions");
	else
		finddir = std::string("../../dosbox-x-remc2/vs2015");
	std::string finddir2 = GetSubDirectoryPath("", "");
	std::string findname = finddir2 + finddir + std::string("/sequence-") + filename + ".bin";
	fptestepc = fopen(findname.c_str(), "rb");
	if (fptestepc == NULL)
	{
		mydelay(100);
		fptestepc = fopen(findname.c_str(), "rb");
	}
	fseek(fptestepc, count * size1 + offset, SEEK_SET);

	fread(buffer, size2, 1, fptestepc);
	uint32_t i;
	bool testa, testb;
	//int diffindex = 0;
	for (i = 0; i < size2; i++)
	{
		int testx = test_E2A74_id_pointer(i);
		if (testx == 1)
		{
			if (*(uint32_t*)&buffer[i])testa = true;
			else testa = false;
			if (*(uint32_t*)&adress[i])testb = true;
			else testb = false;
			if (testa != testb)
			{
				*origbyte = buffer[i];
				*copybyte = adress[i];
				break;
			}
			i += 3;
		}
		else if (testx == 0) {
			if (buffer[i] != adress[i])
			{
				*origbyte = buffer[i];
				*copybyte = adress[i];
				break;
			}
		}
	}

	free(buffer);
	fclose(fptestepc);

	if (i < size2) {
		std::cout << "Regression compare sequence error @ function " << __FUNCTION__ << ", line " << __LINE__ << ": " << i << std::endl;
	}
	return(i);
};

uint32_t compare_with_sequence_array_222BD3(const char* filename, uint8_t* adress, uint32_t  /*adressdos*/, uint32_t count, uint32_t size, uint8_t* origbyte, uint8_t* copybyte, int* posdiff) {
	std::string finddir;
	uint8_t* buffer = (uint8_t*)malloc(size);
	FILE* fptestepc;
	finddir = CommandLineParams.GetMemimagesPath() + std::string("regressions");
	std::string finddir2 = GetSubDirectoryPath("", "");
	std::string findname = finddir2 + finddir + std::string("/sequence-") + filename + ".bin";
	fptestepc = fopen(findname.c_str(), "rb");
	if (fptestepc == NULL)
	{
		mydelay(100);
		fptestepc = fopen(findname.c_str(), "rb");
	}
	fseek(fptestepc, count * size, SEEK_SET);

	fread(buffer, size, 1, fptestepc);
	uint32_t i;
	bool testa, testb;
	int diffindex = 0;
	for (i = 0; i < size; i++)
	{
		int testx = test_222BD3_id_pointer(i);
		if (testx == 1)
		{
			if (*(uint32_t*)&buffer[i])testa = true;
			else testa = false;
			if (*(uint32_t*)&adress[i])testb = true;
			else testb = false;
			if (testa != testb)
			{
				posdiff[diffindex] = i;
				origbyte[diffindex] = buffer[i];
				copybyte[diffindex++] = adress[i];
				if (diffindex >= 100)break;
			}
			i += 3;
		}
		else if (testx == 0) {
			if (buffer[i] != adress[i])
			{
				posdiff[diffindex] = i;
				origbyte[diffindex] = buffer[i];
				copybyte[diffindex++] = adress[i];
				if (diffindex >= 100)break;
			}
		}
	}

	free(buffer);
	fclose(fptestepc);

	if (i < size) {
		std::cout << "Regression compare sequence error @ function " << __FUNCTION__ << ", line " << __LINE__ << ": " << i << std::endl;
	}
	return(i);
};

uint32_t compare_with_sequence(const char* filename, const uint8_t* adress, uint32_t  /*adressdos*/, long count, long size1, uint32_t size2, uint8_t* origbyte, uint8_t* copybyte, long offset, bool regressions) {
	std::string finddir;
	uint8_t* buffer = (uint8_t*)malloc(size2);
	FILE* fptestepc;
	if (regressions)
		finddir = CommandLineParams.GetMemimagesPath() + std::string("regressions");
	else
		finddir = std::string("../../dosbox-x-remc2/vs2015");
	std::string finddir2 = GetSubDirectoryPath("", "");
	std::string findname = finddir2 + finddir + std::string("/sequence-") + filename + ".bin";
	fptestepc = fopen(findname.c_str(), "rb");
	if (fptestepc == NULL)
	{
		mydelay(100);
		fptestepc = fopen(findname.c_str(), "rb");
	}

#ifdef __linux__
	fseek(fptestepc, (long long)count * (long long)size1 + offset, SEEK_SET);
#else
	_fseeki64(fptestepc, (long long)count * (long long)size1 + offset, SEEK_SET);
#endif

	uint32_t i;
	/*for (i = 0; i < count; i++)
	{
		fread_s(buffer,size,1,size, fptestepc);
	}*/

	fread(buffer, size2, 1, fptestepc);
	if (size2 == 320 * 200)
	{
		VGA_Debug_Blit(320, 200, pdwScreenBuffer_351628);
		/*for (int iii = 0; iii < 320 * 200; iii++)pdwScreenBuffer_351628[iii] = buffer[iii];*/
		VGA_Debug_Blit(320, 200, pdwScreenBuffer_351628);
		VGA_Debug_Blit(320, 200, pdwScreenBuffer_351628);
	}
	//for (i = size-1; i >0; i--)
	for (i = 0; i < size2; i++)
	{
		if (buffer[i] != adress[i])
		{
			*origbyte = buffer[i];
			*copybyte = adress[i];
			break;
		}
	}

	if (i < size2) {
		std::cout << "Regression compare sequence error @ function " << __FUNCTION__ << ", line " << __LINE__ << ": " << i << std::endl;
		allert_error();
	}
	free(buffer);
	fclose(fptestepc);
	return(i);
};

void mine_texts(const char* filename, uint32_t adressdos, uint32_t count, char* outfilename) {
	char findnamec[500];
	FILE* fptestepc;
	FILE* fileout;
	char actchar;
	char outtext[2048];
	char outtext2[2176];
	sprintf(findnamec, "c:/prenos/dosbox-x-remc2/vs2015/engine-memory-%s", filename);
	fptestepc = fopen(findnamec, "rb");
	fileout = fopen(outfilename, "wb");
	if (fptestepc == NULL)
	{
		mydelay(100);
		fptestepc = fopen(findnamec, "rb");
	}
	fseek(fptestepc, adressdos, SEEK_SET);
	long adressadd;
	long adressaddall = 0;
	fread(&actchar, 1, 1, fptestepc);
	for (uint32_t i = 0; i < count; i++)
	{
		adressadd = 0;
		while ((adressaddall % 4) || (actchar == 0))
		{
			fread(&actchar, 1, 1, fptestepc);
			adressaddall++;
		}
		while (actchar != 0) {
			outtext[adressadd] = actchar;
			fread(&actchar, 1, 1, fptestepc);
			adressadd++;
			adressaddall++;
		}

		outtext[adressadd] = 0;
		sprintf(outtext2, "char* off_%05lX[1]={%s};\n", 0xDB06C - 0x1131 + adressaddall, outtext);
		if (strlen(outtext2) > 1)
			fwrite(outtext2, strlen(outtext2), 1, fileout);
	}

	fclose(fptestepc);
	fclose(fileout);
};

void writehex(uint8_t* buffer, uint32_t count) {
	for (uint32_t i = 0; i < count; i++)
	{
		if (i % 32 == 0)printf("\n");
		printf("%02X", buffer[i]);
	}
	printf("\n");
};

type_D41A0_BYTESTR_0 D41A0_0;
/*
void x_D41A0_BYTEARRAY_0_to_x_D41A0_BYTESTR_0()
{
	D41A0_BYTESTR_0.word_0xc = *(int16_t*)&x_D41A0_BYTEARRAY_0[0xc];
	D41A0_BYTESTR_0.dword_0x235 = *(int32_t*)&x_D41A0_BYTEARRAY_0[0x235];

	D41A0_BYTESTR_0.byte_0x218D = x_D41A0_BYTEARRAY_0[0x218D];
	D41A0_BYTESTR_0.byte_0x2190 = x_D41A0_BYTEARRAY_0[0x2190];

	D41A0_BYTESTR_0.str_2FECE.byte_0x2FED4 = x_D41A0_BYTEARRAY_0[0x2FED4];

	D41A0_BYTESTR_0.byte_0x365FC = x_D41A0_BYTEARRAY_0[0x365FC];
	D41A0_BYTESTR_0.byte_0x365FD = x_D41A0_BYTEARRAY_0[0x365FD];
	D41A0_BYTESTR_0.word_0x365E0 = *(int16_t*)&x_D41A0_BYTEARRAY_0[0x365E0];

	D41A0_BYTESTR_0.byte_0x36E00 = x_D41A0_BYTEARRAY_0[0x36e00];

	memcpy(D41A0_BYTESTR_0.array_0x365F4, &x_D41A0_BYTEARRAY_0[0x365F4],0x58);
	for (int i = 0; i < 0xb; i++)//fix 0x1 to real count
	{
		memcpy(&D41A0_BYTESTR_0.array_0x2BDE[i], &x_D41A0_BYTEARRAY_0[0x2BDE + 0x84c * i], 0x84c);
	}
	for (int i = 0; i < 0xb; i++)//fix 0x1 to real count
	{
		memcpy(&D41A0_BYTESTR_0.str_2FECE.array_0x3030E[i], &x_D41A0_BYTEARRAY_0[0x3030E + 20 * i], 0x20);
	}
	for (int i = 0; i < 0xb; i++)//fix 0x1 to real count
	{
		memcpy(&D41A0_BYTESTR_0.str_2FECE.array_0x3647A[i], &x_D41A0_BYTEARRAY_0[0x3647A + 8 * i], 0x8);
	}
	for (int i = 0; i < 0xb; i++)//fix 0x1 to real count
	{
		memcpy(&D41A0_BYTESTR_0.array_0x365F4[i], &x_D41A0_BYTEARRAY_0[0x365F4+8*i], 0x8);
	}
}

void x_D41A0_BYTESTR_0_to_x_D41A0_BYTEARRAY_0()
{
	*(int16_t*)&x_D41A0_BYTEARRAY_0[0xc]= D41A0_BYTESTR_0.word_0xc;
	*(int32_t*)&x_D41A0_BYTEARRAY_0[0x235] = D41A0_BYTESTR_0.dword_0x235;

	x_D41A0_BYTEARRAY_0[0x218D] = D41A0_BYTESTR_0.byte_0x218D;
	x_D41A0_BYTEARRAY_0[0x2190] = D41A0_BYTESTR_0.byte_0x2190;

	x_D41A0_BYTEARRAY_0[0x2FED4] = D41A0_BYTESTR_0.str_2FECE.byte_0x2FED4;

	x_D41A0_BYTEARRAY_0[0x365FC]= D41A0_BYTESTR_0.byte_0x365FC;
	x_D41A0_BYTEARRAY_0[0x365FD]= D41A0_BYTESTR_0.byte_0x365FD;
	*(int16_t*)&x_D41A0_BYTEARRAY_0[0x365E0]= D41A0_BYTESTR_0.word_0x365E0;

	x_D41A0_BYTEARRAY_0[0x36e00]= D41A0_BYTESTR_0.byte_0x36E00;

	memcpy(&x_D41A0_BYTEARRAY_0[0x365F4], D41A0_BYTESTR_0.array_0x365F4, 0x58);
	for (int i = 0; i < 0xb; i++)//fix 0x1 to real count
	{
		memcpy(&x_D41A0_BYTEARRAY_0[0x2BDE+ 0x84c * i], &D41A0_BYTESTR_0.array_0x2BDE[i], 0x84c);
	}
	for (int i = 0; i < 0xb; i++)//fix 0x1 to real count
	{
		memcpy(&x_D41A0_BYTEARRAY_0[0x3030E + 20 * i], &D41A0_BYTESTR_0.str_2FECE.array_0x3030E[i], 0x20);
	}
	for (int i = 0; i < 0xb; i++)//fix 0x1 to real count
	{
		memcpy(&x_D41A0_BYTEARRAY_0[0x3647A + 8 * i], &D41A0_BYTESTR_0.str_2FECE.array_0x3647A[i], 0x8);
	}
	for (int i = 0; i < 0xb; i++)//fix 0x1 to real count
	{
		memcpy(&x_D41A0_BYTEARRAY_0[0x365F4 + 8 * i], &D41A0_BYTESTR_0.array_0x365F4[i], 0x8);
	}
}*/

inline void setRGBA(png_byte* ptr, uint8_t* val)
{
	ptr[0] = val[0];
	ptr[1] = val[1];
	ptr[2] = val[2];
	ptr[3] = val[3];
}

int writeImage(const char* filename, int width, int height, uint8_t* buffer, char* title)
{
	int code = 0;
	FILE* fp = NULL;
	png_structp png_ptr = NULL;
	png_infop info_ptr = NULL;
	png_bytep row = NULL;

	// Open file for writing (binary mode)
	fp = fopen(filename, "wb");
	if (fp == NULL) {
		fprintf(stderr, "Could not open file %s for writing\n", filename);
		code = 1;
		goto finalise;
	}

	// Initialize write structure
	png_ptr = png_create_write_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);
	if (png_ptr == NULL) {
		fprintf(stderr, "Could not allocate write struct\n");
		code = 1;
		goto finalise;
	}

	// Initialize info structure
	info_ptr = png_create_info_struct(png_ptr);
	if (info_ptr == NULL) {
		fprintf(stderr, "Could not allocate info struct\n");
		code = 1;
		goto finalise;
	}

	// Setup Exception handling
	if (setjmp(png_jmpbuf(png_ptr))) {
		fprintf(stderr, "Error during png creation\n");
		code = 1;
		goto finalise;
	}

	png_init_io(png_ptr, fp);

	// Write header (8 bit colour depth)
	png_set_IHDR(png_ptr, info_ptr, width, height,
		8, PNG_COLOR_TYPE_RGBA, PNG_INTERLACE_NONE,
		PNG_COMPRESSION_TYPE_BASE, PNG_FILTER_TYPE_BASE);

	// Set title
	if (title != NULL) {
		png_text title_text;
		title_text.compression = PNG_TEXT_COMPRESSION_NONE;
		title_text.key = (png_charp)"Title";
		title_text.text = title;
		png_set_text(png_ptr, info_ptr, &title_text, 1);
	}

	png_write_info(png_ptr, info_ptr);

	// Allocate memory for one row (3 bytes per pixel - RGB)
	row = (png_bytep)malloc(4 * width * sizeof(png_byte));

	// Write image data
	int x, y;
	for (y = 0; y < height; y++) {
		for (x = 0; x < width; x++) {
			setRGBA(&(row[x * 4]), buffer + (y * width + x) * 4);
		}
		png_write_row(png_ptr, row);
	}

	// End write
	png_write_end(png_ptr, NULL);

finalise:
	if (fp != NULL) fclose(fp);
	if (info_ptr != NULL) png_free_data(png_ptr, info_ptr, PNG_FREE_ALL, -1);
	if (png_ptr != NULL) png_destroy_write_struct(&png_ptr, (png_infopp)NULL);
	if (row != NULL) free(row);

	return code;
}

const int bytesPerPixel = 4; /// red, green, blue
const int fileHeaderSize = 14;
const int infoHeaderSize = 40;

unsigned char* createBitmapFileHeader(int height, int  /*width*/, int pitch, int paddingSize) {
	int fileSize = fileHeaderSize + infoHeaderSize + (/*bytesPerPixel*width*/pitch + paddingSize) * height;

	static unsigned char fileHeader[] = {
		0,0, /// signature
		0,0,0,0, /// image file size in bytes
		0,0,0,0, /// reserved
		0,0,0,0, /// start of pixel array
	};

	fileHeader[0] = (unsigned char)('B');
	fileHeader[1] = (unsigned char)('M');
	fileHeader[2] = (unsigned char)(fileSize);
	fileHeader[3] = (unsigned char)(fileSize >> 8);
	fileHeader[4] = (unsigned char)(fileSize >> 16);
	fileHeader[5] = (unsigned char)(fileSize >> 24);
	fileHeader[10] = (unsigned char)(fileHeaderSize + infoHeaderSize);

	return fileHeader;
}

unsigned char* createBitmapInfoHeader(int height, int width) {
	static unsigned char infoHeader[] = {
		0,0,0,0, /// header size
		0,0,0,0, /// image width
		0,0,0,0, /// image height
		0,0, /// number of color planes
		0,0, /// bits per pixel
		0,0,0,0, /// compression
		0,0,0,0, /// image size
		0,0,0,0, /// horizontal resolution
		0,0,0,0, /// vertical resolution
		0,0,0,0, /// colors in color table
		0,0,0,0, /// important color count
	};

	infoHeader[0] = (unsigned char)(infoHeaderSize);
	infoHeader[4] = (unsigned char)(width);
	infoHeader[5] = (unsigned char)(width >> 8);
	infoHeader[6] = (unsigned char)(width >> 16);
	infoHeader[7] = (unsigned char)(width >> 24);
	infoHeader[8] = (unsigned char)(height);
	infoHeader[9] = (unsigned char)(height >> 8);
	infoHeader[10] = (unsigned char)(height >> 16);
	infoHeader[11] = (unsigned char)(height >> 24);
	infoHeader[12] = (unsigned char)(1);
	infoHeader[14] = (unsigned char)(bytesPerPixel * 8);

	return infoHeader;
}

void writeImageBMP(const char* imageFileName, int width, int height, uint8_t* image)
{
	int pitch = bytesPerPixel * width;
	unsigned char padding[3] = { 0, 0, 0 };
	int paddingSize = (4 - (/*width*bytesPerPixel*/ pitch) % 4) % 4;

	unsigned char* fileHeader = createBitmapFileHeader(height, width, pitch, paddingSize);
	unsigned char* infoHeader = createBitmapInfoHeader(height, width);

	FILE* imageFile = fopen(imageFileName, "wb");

	fwrite(fileHeader, 1, fileHeaderSize, imageFile);
	fwrite(infoHeader, 1, infoHeaderSize, imageFile);

	int i;
	for (i = 0; i < height; i++) {
		fwrite(image + (i * pitch /*width*bytesPerPixel*/), bytesPerPixel, width, imageFile);
		fwrite(padding, 1, paddingSize, imageFile);
	}

	fclose(imageFile);
	//free(fileHeader);
	//free(infoHeader);
}

void write_posistruct_to_png(uint8_t* buffer, int width, int height, const char* filename) {
	//int width = actposistruct->width;
	//int height = actposistruct->height;
	//png_bytep *row_pointers=(png_bytep*)malloc(sizeof(row_pointers)*height);
	//png_bytep row = NULL;
	//uint8_t buffer[10000];

	//uint8_t* buffer_ptr = buffer;

	//uint8_t* texture= actposistruct->data;

	//uint8_t* v21_buffer_temp_index1 = buffer;
	/*
	//v21 = (char *)(dword_18062C * a2 + a3 + v6);
	int8_t v22_loc = 0;
	int8_t v23_loc = -1;
	int8_t* v25_loc = 0;
	int8_t v26_loc = 0;
	int8_t* v27_loc = 0;
	int8_t* v24_loc = (int8_t*)v21_buffer_temp_index1;

	int screenWidth_18062C = 11;
	int a1byte2 = 8;

	do
	{
		while (1)
		{
			while (1)
			{
				v23_loc = texture[0];
				texture++;
				if ((v23_loc & 0x80u) == 0)
					break;
				v25_loc = (int8_t*)&v21_buffer_temp_index1[-v23_loc];
				v26_loc = texture[0];
				v27_loc = (int8_t*)(texture + 1);
				v22_loc = v26_loc;
				memcpy(v25_loc, v27_loc, v22_loc);
				texture = (uint8_t*)&v27_loc[v22_loc];
				v21_buffer_temp_index1 = (uint8_t*)&v25_loc[v22_loc];
				v22_loc = 0;
			}
			if (!v23_loc)
				break;
			v22_loc = v23_loc;
			memcpy(v21_buffer_temp_index1, texture, v22_loc);
			texture += v22_loc;
			v21_buffer_temp_index1 += v22_loc;
			v22_loc = 0;
		}
		v24_loc += screenWidth_18062C;
		v21_buffer_temp_index1 = (uint8_t*)v24_loc;
		a1byte2--;
	} while (a1byte2);
	*/

	uint8_t Palettebuffer[768];
	FILE* palfile;
	//fopen_s(&palfile, "c:\\prenos\\remc2\\testpal.pal", "rb");
	palfile = fopen("c:\\prenos\\remc2\\tools\\palletelight\\Debug\\out-n.pal", "rb");
	fread(Palettebuffer, 768, 1, palfile);
	fclose(palfile);

	uint8_t buffer2[10000 * 4];
	for (int i = 0; i < width * height; i++)
	{
		/*buffer2[i * 4 + 0] = buffer[i];
		buffer2[i * 4 + 1] = buffer[i];
		buffer2[i * 4 + 2] = buffer[i];*/
		buffer2[i * 4 + 0] = Palettebuffer[buffer[(width * height) - 1 - i] * 3 + 2];
		buffer2[i * 4 + 1] = Palettebuffer[buffer[(width * height) - 1 - i] * 3 + 1];
		buffer2[i * 4 + 2] = Palettebuffer[buffer[(width * height) - 1 - i] * 3];

		if (buffer[(width * height) - 1 - i] != 0xff)buffer2[i * 4 + 3] = 255;
	}
	//writeImage(filename, width, height, buffer2);
	writeImageBMP(filename, width, height, buffer2);
	/*
	int y;

	FILE *fp = fopen(filename, "wb");
	if (!fp) abort();

	png_structp png = png_create_write_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);
	if (!png) abort();

	png_infop info = png_create_info_struct(png);
	if (!info) abort();

	if (setjmp(png_jmpbuf(png))) abort();

	png_init_io(png, fp);

	// Output is 8bit depth, RGBA format.
	png_set_IHDR(
		png,
		info,
		width, height,
		8,
		PNG_COLOR_TYPE_RGBA,
		PNG_INTERLACE_NONE,
		PNG_COMPRESSION_TYPE_DEFAULT,
		PNG_FILTER_TYPE_DEFAULT
	);
	png_write_info(png, info);

	// To remove the alpha channel for PNG_COLOR_TYPE_RGB format,
	// Use png_set_filler().
	//png_set_filler(png, 0, PNG_FILLER_AFTER);

	// Allocate memory for one row (3 bytes per pixel - RGB)
	row = (png_bytep)malloc(3 * width * sizeof(png_byte));

	// Write image data
	int xx, yy;
	for (yy = 0; yy < height; yy++) {
		for (xx = 0; xx < width; xx++) {
			setRGB(&(row[xx * 3]), buffer[yy*width + xx]);
		}
		png_write_row(png, row);
	}

	// End write
	png_write_end(png, NULL);

	if (fp != NULL) fclose(fp);
	if (info != NULL) png_free_data(png, info, PNG_FREE_ALL, -1);
	if (png != NULL) png_destroy_write_struct(&png, (png_infopp)NULL);
	if (row != NULL) free(row);*/
}

void buff_posistruct_to_png(uint8_t* buffer, int width, int height, const char* filename) {
	//png_bytep row = NULL;
	uint8_t Palettebuffer[768];
	FILE* palfile;
	palfile = fopen("c:\\prenos\\remc2\\testpal.pal", "rb");
	fread(Palettebuffer, 768, 1, palfile);
	fclose(palfile);

	uint8_t buffer2[10000 * 4];
	for (int i = 0; i < 10000; i++)
	{
		buffer2[i * 4 + 0] = Palettebuffer[buffer[i] * 3];
		buffer2[i * 4 + 1] = Palettebuffer[buffer[i] * 3 + 1];
		buffer2[i * 4 + 2] = Palettebuffer[buffer[i] * 3 + 2];

		if (buffer[i] != 0xff)buffer2[i * 4 + 3] = 255;
	}
	writeImage(filename, width, height, buffer2, (char*)"test");
}

void testdword(int32_t* val1, int32_t* val2) {
	if (*val1 != *val2)
	{
		printf("x_D41A0_BYTEARRAY_0_error");
		//allert_error();
		//exit(0);
	}
}

void testcbyte(int count, uint8_t* val1, uint8_t* val2) {
	for (int i = 0; i < count; count++)
		if (val1[i] != val2[i])
		{
			printf("x_D41A0_BYTEARRAY_0_error");
			//allert_error();
			//exit(0);
		}
}

void testword(int16_t* val1, int16_t* val2) {
	if (*val1 != *val2)
	{
		printf("x_D41A0_BYTEARRAY_0_error");
		//allert_error();
		//exit(0);
	}
}

void testbyte(uint8_t* val1, uint8_t* val2) {
	if (*val1 != *val2)
	{
		printf("x_D41A0_BYTEARRAY_0_error");
		//allert_error();
		//exit(0);
	}
}

/*int32_t get_x_D41A0_BYTEARRAY_0_4() {
	testdword((int32_t*)(x_D41A0_BYTEARRAY_0 + 4), &D41A0_BYTESTR_0.dword_0x4);
	return *(int32_t*)(x_D41A0_BYTEARRAY_0 + 4);
};
void set_x_D41A0_BYTEARRAY_0_4(int32_t value) {
	*(int32_t*)(x_D41A0_BYTEARRAY_0 + 4) = value;
	D41A0_BYTESTR_0.dword_0x4 = value;
};

int32_t get_x_D41A0_BYTEARRAY_0_8() {
	testdword((int32_t*)(x_D41A0_BYTEARRAY_0 + 8), &D41A0_BYTESTR_0.dword_0x8);
	return *(int32_t*)(x_D41A0_BYTEARRAY_0 + 8);
};
void set_x_D41A0_BYTEARRAY_0_8(int32_t value) {
	D41A0_BYTESTR_0.dword_0x8 = value;
	*(int32_t*)(x_D41A0_BYTEARRAY_0 + 8) = value;
};

int16_t get_x_D41A0_BYTEARRAY_0_0xe() {
	testword((int16_t*)&x_D41A0_BYTEARRAY_0[0xe], &D41A0_BYTESTR_0.word_0xe);
	return D41A0_BYTESTR_0.word_0xe;
};
void set_x_D41A0_BYTEARRAY_0_0xe(int16_t value) {
	*(int16_t*)&x_D41A0_BYTEARRAY_0[0xe] = value;
	D41A0_BYTESTR_0.word_0xe = value;
};

int8_t get_x_D41A0_BYTEARRAY_0_0x10(int number) {
	testbyte(&x_D41A0_BYTEARRAY_0[number + 0x10], &D41A0_BYTESTR_0.array_0x10[number]);
	return D41A0_BYTESTR_0.array_0x10[number];
};
void set_x_D41A0_BYTEARRAY_0_0x10(int number, int8_t value) {
	x_D41A0_BYTEARRAY_0[number + 0x10] = value;
	D41A0_BYTESTR_0.array_0x10[number] = value;
};

void plus_x_D41A0_BYTEARRAY_0_0x10(int number) {
	x_D41A0_BYTEARRAY_0[number + 0x10]++;
	D41A0_BYTESTR_0.array_0x10[number] = x_D41A0_BYTEARRAY_0[number + 0x10];
};

uint8_t get_x_D41A0_BYTEARRAY_0_0x22() {
	testbyte(&x_D41A0_BYTEARRAY_0[0x22], &D41A0_BYTESTR_0.byte_0x22);
	return D41A0_BYTESTR_0.byte_0x22;
};
void set_x_D41A0_BYTEARRAY_0_0x22(uint8_t value) {
	x_D41A0_BYTEARRAY_0[0x22] = value;
	D41A0_BYTESTR_0.byte_0x22 = value;
};

int32_t get_x_D41A0_BYTEARRAY_0_0x35() {
	testdword((int32_t*)&x_D41A0_BYTEARRAY_0[0x35], &D41A0_BYTESTR_0.dword_0x35);
	return D41A0_BYTESTR_0.dword_0x35;
};
void set_x_D41A0_BYTEARRAY_0_0x35(int32_t value) {
	*(int32_t*)&x_D41A0_BYTEARRAY_0[0x35] = value;
	D41A0_BYTESTR_0.dword_0x35 = value;
};

void plus_x_D41A0_BYTEARRAY_0_0x35() {
	(*(int32_t*)&x_D41A0_BYTEARRAY_0[0x35])++;
	D41A0_BYTESTR_0.dword_0x35 = *(int32_t*)&x_D41A0_BYTEARRAY_0[0x35];
};

void minus_x_D41A0_BYTEARRAY_0_0x35() {
	(*(int32_t*)&x_D41A0_BYTEARRAY_0[0x35])--;
	D41A0_BYTESTR_0.dword_0x35 = *(int32_t*)&x_D41A0_BYTEARRAY_0[0x35];
};

int32_t get_x_D41A0_BYTEARRAY_0_235() {
	testdword((int32_t*)&x_D41A0_BYTEARRAY_0[0x235], &D41A0_BYTESTR_0.dword_0x235);
	return D41A0_BYTESTR_0.dword_0x235;
};
void set_x_D41A0_BYTEARRAY_0_235(int32_t value) {
	*(int32_t*)&x_D41A0_BYTEARRAY_0[0x235] = value;
	D41A0_BYTESTR_0.dword_0x235 = value;
};

int32_t get_x_D41A0_BYTEARRAY_0_23a() {
	testdword((int32_t*)&x_D41A0_BYTEARRAY_0[0x23a], &D41A0_BYTESTR_0.dword_0x23a);
	return D41A0_BYTESTR_0.dword_0x23a;
};
void set_x_D41A0_BYTEARRAY_0_23a(int32_t value) {
	*(int32_t*)&x_D41A0_BYTEARRAY_0[0x23a] = value;
	D41A0_BYTESTR_0.dword_0x23a = value;
};

int32_t get_x_D41A0_BYTEARRAY_0_23e() {
	testdword((int32_t*)&x_D41A0_BYTEARRAY_0[0x23e], &D41A0_BYTESTR_0.dword_0x23e);
	return D41A0_BYTESTR_0.dword_0x23e;
};
void set_x_D41A0_BYTEARRAY_0_23e(int32_t value) {
	*(int32_t*)&x_D41A0_BYTEARRAY_0[0x23e] = value;
	D41A0_BYTESTR_0.dword_0x23e = value;
};

int32_t get_x_D41A0_BYTEARRAY_0_242() {
	testdword((int32_t*)&x_D41A0_BYTEARRAY_0[0x242], &D41A0_BYTESTR_0.dword_0x242);
	return D41A0_BYTESTR_0.dword_0x242;
};
void set_x_D41A0_BYTEARRAY_0_242(int32_t value) {
	*(int32_t*)&x_D41A0_BYTEARRAY_0[0x242] = value;
	D41A0_BYTESTR_0.dword_0x242 = value;
};

type_str_0x6E8E* get_x_D41A0_BYTEARRAY_0_0x246(int number) {
	testdword((int32_t*)&x_D41A0_BYTEARRAY_0[4*number + 0x246], (int32_t*)&D41A0_BYTESTR_0.pointers_0x246[number]);
	return D41A0_BYTESTR_0.pointers_0x246[number];
};
void set_x_D41A0_BYTEARRAY_0_0x246(int number, type_str_0x6E8E* value) {
	*(uint8_t**)&x_D41A0_BYTEARRAY_0[4*number + 0x246] = (uint8_t*)value;
	D41A0_BYTESTR_0.pointers_0x246[number] = value;
};

int32_t get_x_D41A0_BYTEARRAY_0_0x11e6() {
	testdword((int32_t*)&x_D41A0_BYTEARRAY_0[0x11e6], (int32_t*)&D41A0_BYTESTR_0.dword_0x11e6);
	return D41A0_BYTESTR_0.dword_0x11e6;
};
void set_x_D41A0_BYTEARRAY_0_0x11e6(int32_t value) {
	*(int32_t*)&x_D41A0_BYTEARRAY_0[0x11e6] = value;
	D41A0_BYTESTR_0.dword_0x11e6= value;
};

uint8_t get_x_D41A0_BYTEARRAY_0_0x218a() {
	testbyte(&x_D41A0_BYTEARRAY_0[0x218A], &D41A0_BYTESTR_0.byte_0x218A);
	return D41A0_BYTESTR_0.byte_0x218A;
};
void set_x_D41A0_BYTEARRAY_0_0x218a(uint8_t value) {
	x_D41A0_BYTEARRAY_0[0x218A] = value;
	D41A0_BYTESTR_0.byte_0x218A = value;
};
uint8_t get_x_D41A0_BYTEARRAY_0_0x218b() {
	testbyte(&x_D41A0_BYTEARRAY_0[0x218B], &D41A0_BYTESTR_0.byte_0x218B);
	return D41A0_BYTESTR_0.byte_0x218B;
};
void set_x_D41A0_BYTEARRAY_0_0x218b(uint8_t value) {
	x_D41A0_BYTEARRAY_0[0x218b] = value;
	D41A0_BYTESTR_0.byte_0x218B = value;
};
uint8_t get_x_D41A0_BYTEARRAY_0_0x218c() {
	testbyte(&x_D41A0_BYTEARRAY_0[0x218C], &D41A0_BYTESTR_0.byte_0x218C);
	return D41A0_BYTESTR_0.byte_0x218C;
};
void set_x_D41A0_BYTEARRAY_0_0x218c(uint8_t value) {
	x_D41A0_BYTEARRAY_0[0x218C] = value;
	D41A0_BYTESTR_0.byte_0x218C = value;
};
uint8_t get_x_D41A0_BYTEARRAY_0_0x218d() {
	testbyte(&x_D41A0_BYTEARRAY_0[0x218d], &D41A0_BYTESTR_0.byte_0x218D);
	return D41A0_BYTESTR_0.byte_0x218D;
};
void set_x_D41A0_BYTEARRAY_0_0x218d(uint8_t value) {
	x_D41A0_BYTEARRAY_0[0x218d] = value;
	D41A0_BYTESTR_0.byte_0x218D = value;
};
uint8_t get_x_D41A0_BYTEARRAY_0_0x218e() {
	testbyte(&x_D41A0_BYTEARRAY_0[0x218e], &D41A0_BYTESTR_0.byte_0x218E);
	return D41A0_BYTESTR_0.byte_0x218E;
};
void set_x_D41A0_BYTEARRAY_0_0x218e(uint8_t value) {
	x_D41A0_BYTEARRAY_0[0x218e] = value;
	D41A0_BYTESTR_0.byte_0x218E = value;
};
uint8_t get_x_D41A0_BYTEARRAY_0_0x218f() {
	testbyte(&x_D41A0_BYTEARRAY_0[0x218f], &D41A0_BYTESTR_0.byte_0x218F);
	return D41A0_BYTESTR_0.byte_0x218F;
};
void set_x_D41A0_BYTEARRAY_0_0x218f(uint8_t value) {
	x_D41A0_BYTEARRAY_0[0x218f] = value;
	D41A0_BYTESTR_0.byte_0x218F = value;
};
uint8_t get_x_D41A0_BYTEARRAY_0_0x2190() {
	testbyte(&x_D41A0_BYTEARRAY_0[0x2190], &D41A0_BYTESTR_0.byte_0x2190);
	return D41A0_BYTESTR_0.byte_0x2190;
};
void set_x_D41A0_BYTEARRAY_0_0x2190(uint8_t value) {
	x_D41A0_BYTEARRAY_0[0x2190] = value;
	D41A0_BYTESTR_0.byte_0x2190 = value;
};
uint8_t get_x_D41A0_BYTEARRAY_0_0x2196() {
	testbyte(&x_D41A0_BYTEARRAY_0[0x2196], &D41A0_BYTESTR_0.byte_0x2196);
	return D41A0_BYTESTR_0.byte_0x2196;
};
void set_x_D41A0_BYTEARRAY_0_0x2196(uint8_t value) {
	x_D41A0_BYTEARRAY_0[0x2196] = value;
	D41A0_BYTESTR_0.byte_0x2196 = value;
};
uint8_t get_x_D41A0_BYTEARRAY_0_0x2197() {
	testbyte(&x_D41A0_BYTEARRAY_0[0x2197], &D41A0_BYTESTR_0.byte_0x2197);
	return D41A0_BYTESTR_0.byte_0x2197;
};
void set_x_D41A0_BYTEARRAY_0_0x2197(uint8_t value) {
	x_D41A0_BYTEARRAY_0[0x2197] = value;
	D41A0_BYTESTR_0.byte_0x2197 = value;
};
uint8_t get_x_D41A0_BYTEARRAY_0_0x2198() {
	testbyte(&x_D41A0_BYTEARRAY_0[0x2198], &D41A0_BYTESTR_0.byte_0x2198);
	return D41A0_BYTESTR_0.byte_0x2198;
};
void set_x_D41A0_BYTEARRAY_0_0x2198(uint8_t value) {
	x_D41A0_BYTEARRAY_0[0x2198] = value;
	D41A0_BYTESTR_0.byte_0x2198 = value;
};
uint8_t get_x_D41A0_BYTEARRAY_0_0x2199() {
	testbyte(&x_D41A0_BYTEARRAY_0[0x2199], &D41A0_BYTESTR_0.byte_0x2199);
	return D41A0_BYTESTR_0.byte_0x2199;
};
void set_x_D41A0_BYTEARRAY_0_0x2199(uint8_t value) {
	x_D41A0_BYTEARRAY_0[0x2199] = value;
	D41A0_BYTESTR_0.byte_0x2199 = value;
};

uint8_t get_x_D41A0_BYTEARRAY_0_0x21aa() {
	testbyte(&x_D41A0_BYTEARRAY_0[0x21AA], &D41A0_BYTESTR_0.byte_0x21AA);
	return D41A0_BYTESTR_0.byte_0x21AA;
};
void set_x_D41A0_BYTEARRAY_0_0x21aa(uint8_t value) {
	x_D41A0_BYTEARRAY_0[0x21AA] = value;
	D41A0_BYTESTR_0.byte_0x21AA = value;
};
uint8_t get_x_D41A0_BYTEARRAY_0_0x21ab() {
	testbyte(&x_D41A0_BYTEARRAY_0[0x21AB], &D41A0_BYTESTR_0.byte_0x21AB);
	return D41A0_BYTESTR_0.byte_0x21AB;
};
void set_x_D41A0_BYTEARRAY_0_0x21ab(uint8_t value) {
	x_D41A0_BYTEARRAY_0[0x21AB] = value;
	D41A0_BYTESTR_0.byte_0x21AB = value;
};
uint8_t get_x_D41A0_BYTEARRAY_0_0x21ac() {
	testbyte(&x_D41A0_BYTEARRAY_0[0x21AC], &D41A0_BYTESTR_0.byte_0x21AC);
	return D41A0_BYTESTR_0.byte_0x21AC;
};
void set_x_D41A0_BYTEARRAY_0_0x21ac(uint8_t value) {
	x_D41A0_BYTEARRAY_0[0x21AC] = value;
	D41A0_BYTESTR_0.byte_0x21AC = value;
};
uint8_t get_x_D41A0_BYTEARRAY_0_0x21ad() {
	testbyte(&x_D41A0_BYTEARRAY_0[0x21AD], &D41A0_BYTESTR_0.byte_0x21AD);
	return D41A0_BYTESTR_0.byte_0x21AD;
};
void set_x_D41A0_BYTEARRAY_0_0x21ad(uint8_t value) {
	x_D41A0_BYTEARRAY_0[0x21AD] = value;
	D41A0_BYTESTR_0.byte_0x21AD = value;
};
uint8_t get_x_D41A0_BYTEARRAY_0_0x21ae() {
	testbyte(&x_D41A0_BYTEARRAY_0[0x21AE], &D41A0_BYTESTR_0.byte_0x21AE);
	return D41A0_BYTESTR_0.byte_0x21AE;
};
void set_x_D41A0_BYTEARRAY_0_0xx21ae(uint8_t value) {
	x_D41A0_BYTEARRAY_0[0x21AE] = value;
	D41A0_BYTESTR_0.byte_0x21AE = value;
};
uint8_t get_x_D41A0_BYTEARRAY_0_0x21af() {
	testbyte(&x_D41A0_BYTEARRAY_0[0x21AF], &D41A0_BYTESTR_0.byte_0x21AF);
	return D41A0_BYTESTR_0.byte_0x21AF;
};
void set_x_D41A0_BYTEARRAY_0_0x21af(uint8_t value) {
	x_D41A0_BYTEARRAY_0[0x21AF] = value;
	D41A0_BYTESTR_0.byte_0x21AF = value;
};
uint8_t get_x_D41A0_BYTEARRAY_0_0x21b0() {
	testbyte(&x_D41A0_BYTEARRAY_0[0x21B0], &D41A0_BYTESTR_0.byte_0x21B0);
	return D41A0_BYTESTR_0.byte_0x21B0;
};
void set_x_D41A0_BYTEARRAY_0_0x21b0(uint8_t value) {
	x_D41A0_BYTEARRAY_0[0x21B0] = value;
	D41A0_BYTESTR_0.byte_0x21B0 = value;
};
uint8_t get_x_D41A0_BYTEARRAY_0_0x21b1() {
	testbyte(&x_D41A0_BYTEARRAY_0[0x21B1], &D41A0_BYTESTR_0.byte_0x21B1);
	return D41A0_BYTESTR_0.byte_0x21B1;
};
void set_x_D41A0_BYTEARRAY_0_0x21b1(uint8_t value) {
	x_D41A0_BYTEARRAY_0[0x21B1] = value;
	D41A0_BYTESTR_0.byte_0x21B1 = value;
};
uint8_t get_x_D41A0_BYTEARRAY_0_0x21b2() {
	testbyte(&x_D41A0_BYTEARRAY_0[0x21B2], &D41A0_BYTESTR_0.byte_0x21B2);
	return D41A0_BYTESTR_0.byte_0x21B2;
};
void set_x_D41A0_BYTEARRAY_0_0x21b2(uint8_t value) {
	x_D41A0_BYTEARRAY_0[0x21B2] = value;
	D41A0_BYTESTR_0.byte_0x21B2 = value;
};
uint8_t get_x_D41A0_BYTEARRAY_0_0x21b3() {
	testbyte(&x_D41A0_BYTEARRAY_0[0x21B3], &D41A0_BYTESTR_0.byte_0x21B3);
	return D41A0_BYTESTR_0.byte_0x21B3;
};
void set_x_D41A0_BYTEARRAY_0_0x21b3(uint8_t value) {
	x_D41A0_BYTEARRAY_0[0x21B3] = value;
	D41A0_BYTESTR_0.byte_0x21B3 = value;
};
uint8_t get_x_D41A0_BYTEARRAY_0_0x21b4() {
	testbyte(&x_D41A0_BYTEARRAY_0[0x21B4], &D41A0_BYTESTR_0.byte_0x21B4);
	return D41A0_BYTESTR_0.byte_0x21B4;
};
void set_x_D41A0_BYTEARRAY_0_0x21b4(uint8_t value) {
	x_D41A0_BYTEARRAY_0[0x21B4] = value;
	D41A0_BYTESTR_0.byte_0x21B4 = value;
};
uint8_t get_x_D41A0_BYTEARRAY_0_0x21b5() {
	testbyte(&x_D41A0_BYTEARRAY_0[0x21B5], &D41A0_BYTESTR_0.byte_0x21B5);
	return D41A0_BYTESTR_0.byte_0x21B5;
};
void set_x_D41A0_BYTEARRAY_0_0x21b5(uint8_t value) {
	x_D41A0_BYTEARRAY_0[0x21B5] = value;
	D41A0_BYTESTR_0.byte_0x21B5 = value;
};
uint8_t get_x_D41A0_BYTEARRAY_0_0x21b6() {
	testbyte(&x_D41A0_BYTEARRAY_0[0x21B6], &D41A0_BYTESTR_0.byte_0x21B6);
	return D41A0_BYTESTR_0.byte_0x21B6;
};
void set_x_D41A0_BYTEARRAY_0_0x21b6(uint8_t value) {
	x_D41A0_BYTEARRAY_0[0x21B6] = value;
	D41A0_BYTESTR_0.byte_0x21B6 = value;
};
uint8_t get_x_D41A0_BYTEARRAY_0_0x21b7() {
	testbyte(&x_D41A0_BYTEARRAY_0[0x21B7], &D41A0_BYTESTR_0.byte_0x21B7);
	return D41A0_BYTESTR_0.byte_0x21B7;
};
void set_x_D41A0_BYTEARRAY_0_0x21b7(uint8_t value) {
	x_D41A0_BYTEARRAY_0[0x21B7] = value;
	D41A0_BYTESTR_0.byte_0x21B7 = value;
};
uint8_t get_x_D41A0_BYTEARRAY_0_0x21b8() {
	testbyte(&x_D41A0_BYTEARRAY_0[0x21B8], &D41A0_BYTESTR_0.byte_0x21B8);
	return D41A0_BYTESTR_0.byte_0x21B8;
};
void set_x_D41A0_BYTEARRAY_0_0x21b8(uint8_t value) {
	x_D41A0_BYTEARRAY_0[0x21B8] = value;
	D41A0_BYTESTR_0.byte_0x21B8 = value;
};

axis_3d get_x_D41A0_BYTEARRAY_0_0x2362(int number) {
	testcbyte(6, (uint8_t*)&x_D41A0_BYTEARRAY_0[6 * number + 0x2362], (uint8_t*)&D41A0_BYTESTR_0.array_0x2362[number]);
	//testdword((int32_t*)&x_D41A0_BYTEARRAY_0[6*number+0x2362], &D41A0_BYTESTR_0.array_0x2362[number]);
	return D41A0_BYTESTR_0.array_0x2362[number];
};
void set_x_D41A0_BYTEARRAY_0_0x2362(int number, axis_3d value) {
	memcpy(&x_D41A0_BYTEARRAY_0[6 * number + 0x2362],&value,6);
	// *(int32_t*)&x_D41A0_BYTEARRAY_0[6 * number + 0x2362] = value;
	D41A0_BYTESTR_0.array_0x2362[number] = value;
};
*/
/*int16_t get_x_D41A0_BYTEARRAY_0_0x2366(int number) {
	testword((int16_t*)&x_D41A0_BYTEARRAY_0[6 * number + 0x2362+4], &D41A0_BYTESTR_0.array_0x2362[number].w);
	return D41A0_BYTESTR_0.array_0x2362[number].w;
};
void set_x_D41A0_BYTEARRAY_0_0x2366(int number, int16_t value) {
	*(int16_t*)&x_D41A0_BYTEARRAY_0[6 * number + 0x2362+4] = value;
	D41A0_BYTESTR_0.array_0x2362[number].w = value;
};*/

void clean_x_D41A0_BYTEARRAY_0_0x2362() {
	//memset((void*)(&x_D41A0_BYTEARRAY_0[0x2362]), 0, 48);
	for (int i = 0; i < 8; i++)
	{
		D41A0_0.array_0x2362[i].x = 0;
		D41A0_0.array_0x2362[i].y = 0;
		D41A0_0.array_0x2362[i].z = 0;
	}
};

void clean_x_D41A0_BYTEARRAY_0_0x2BDE(int number) {
	//memset((void*)(&x_D41A0_BYTEARRAY_0[0x2BDE+2124*number]), 0, 2124);
	memset((void*)(&D41A0_0.array_0x2BDE[number]), 0, 2124);
	/*for (int i = 0; i < 8; i++)
	{
		D41A0_BYTESTR_0.array_0x2BDE[i].byte_0x000_2BDE_11230=0;//0	//11230 - byte? - ne zacatek struktury
		D41A0_BYTESTR_0.array_0x2BDE[i].byte_0x001_2BDF_11231_xx = 0;
		D41A0_BYTESTR_0.array_0x2BDE[i].byte_0x002_2BE0_11232 = 0;//2	//11232 - byte //2
		D41A0_BYTESTR_0.array_0x2BDE[i].byte_0x003_2BE0_11233_xx = 0;
		D41A0_BYTESTR_0.array_0x2BDE[i].byte_0x004_2BE0_11234 = 0;//2	//11234 - byte //4
		D41A0_BYTESTR_0.array_0x2BDE[i].byte_0x005_2BE0_11235_xx = 0;
		D41A0_BYTESTR_0.array_0x2BDE[i].byte_0x006_2BE4_11236 = 0;//6	//11236 - byte //6
		D41A0_BYTESTR_0.array_0x2BDE[i].byte_0x007_2BE4_11237_xx = 0;
		D41A0_BYTESTR_0.array_0x2BDE[i].byte_0x008_2BE4_11238_xx = 0;
		D41A0_BYTESTR_0.array_0x2BDE[i].byte_0x009_2BE4_11239_xx = 0;
		D41A0_BYTESTR_0.array_0x2BDE[i].word_0x00a_2BE4_11240 = 0;//10 //11240 - word - index z EA3E4 //0xa
		for (int j = 0; j < 16; j++)
			D41A0_BYTESTR_0.array_0x2BDE[i].stub[j]=0;
		for (int j = 0; j < 49; j++)
			D41A0_BYTESTR_0.array_0x2BDE[i].array_0x01c_2BFA_11258[j]=0;//28//11258 - byte* jmeno2?
		D41A0_BYTESTR_0.array_0x2BDE[i].word_0x04d_2C2B_11307 = 0;//77 //11307 - word
		D41A0_BYTESTR_0.array_0x2BDE[i].word_0x04d_2C2D_11309 = 0;//79 //11309 - word
		for (int j = 0; j < 846; j++)
			D41A0_BYTESTR_0.array_0x2BDE[i].stub2[j];
		for (int j = 0; j < 64; j++)
			D41A0_BYTESTR_0.array_0x2BDE[i].array_0x39f_2BFA_12157[j];//927//12157 - byte(11230+927) 100% jmeno
		D41A0_BYTESTR_0.array_0x2BDE[i].byte_0x3DF_2BE4_12221 = 0;//991//12221 - byte
		D41A0_BYTESTR_0.array_0x2BDE[i].byte_0x3E0_2BE4_12222_xx = 0;
		D41A0_BYTESTR_0.array_0x2BDE[i].byte_0x3E1_2BE4_12223 = 0;//993//12223 - byte
		D41A0_BYTESTR_0.array_0x2BDE[i].byte_0x3E2_2BE4_12224 = 0;//994//12224 - byte
		for (int j = 0; j < 61; j++)
			D41A0_BYTESTR_0.array_0x2BDE[i].stub3[j];
		D41A0_BYTESTR_0.array_0x2BDE[i].byte_0x420_2BE4_12286 = 0;//1056//12286 - byte
		for (int j = 0; j < 942; j++)
			D41A0_BYTESTR_0.array_0x2BDE[i].stub4[j];
		for (int j = 0; j < 24; j++)
			D41A0_BYTESTR_0.array_0x2BDE[i].struct_0x649_2BDE_12839.array_0x7CF_2BDE_13229[j];
		D41A0_BYTESTR_0.array_0x2BDE[i].struct_0x649_2BDE_12839.word_0x7E7_2BDE_13253=0;
		for (int j = 0; j < 99; j++)
			D41A0_BYTESTR_0.array_0x2BDE[i].stub5[j];
	}*/
};
/*
void copyto_x_D41A0_BYTEARRAY_0_0x2BDE_0x7CF(int number, uint8_t* value) {
	memcpy(&x_D41A0_BYTEARRAY_0[0x2BDE + 2124*number+1999], value, 24);
	memcpy(D41A0_BYTESTR_0.array_0x2BDE[number].struct_0x649_2BDE_12839.array_0x7CF_2BDE_13229, value, 24);
};

void copyto_x_D41A0_BYTEARRAY_0_0x2BDE_0x7E7(int number, uint8_t* value) {
	memcpy(&x_D41A0_BYTEARRAY_0[0x2BDE + 2124 * number + 2023], value, 24);
	//xx D41A0_BYTESTR_0.array_0x2BDE[number].struct_0x649_2BDE_12839.word_0x7E7_2BDE_13253 = value;
	memcpy(&D41A0_BYTESTR_0.array_0x2BDE[number].struct_0x649_2BDE_12839.array_0x7CF_2BDE_13229[0x18], value, 24);
};

void set_x_D41A0_BYTEARRAY_0_0x2BDE_0x7(int number, int16_t value) {
	*(int16_t*)&x_D41A0_BYTEARRAY_0[0x2BDE + 2124 * number + 0x7] = value;
	D41A0_BYTESTR_0.array_0x2BDE[number].word_0x007_2BE4_11237 = value;
};

int8_t get_x_D41A0_BYTEARRAY_0_0x2BDE_0x9(int number) {
	testbyte(&x_D41A0_BYTEARRAY_0[0x2BDE + 2124 * number + 0x9], (uint8_t*)&D41A0_BYTESTR_0.array_0x2BDE[number].byte_0x009_2BE4_11239);
	return D41A0_BYTESTR_0.array_0x2BDE[number].byte_0x009_2BE4_11239;
};

void set_x_D41A0_BYTEARRAY_0_0x2BDE_0x9(int number, int8_t value) {
	*(int8_t*)&x_D41A0_BYTEARRAY_0[0x2BDE + 2124 * number + 0x9] = value;
	D41A0_BYTESTR_0.array_0x2BDE[number].byte_0x009_2BE4_11239 = value;
};
void set_x_D41A0_BYTEARRAY_0_0x2BDE_0xe(int number, int16_t value) {
	*(int16_t*)&x_D41A0_BYTEARRAY_0[0x2BDE + 2124 * number + 0xe] = value;
	D41A0_BYTESTR_0.array_0x2BDE[number].word_0x00e_2BDE_11244 = value;
};
int16_t get_x_D41A0_BYTEARRAY_0_0x2BDE_0x10(int number) {
	testword((int16_t*)&x_D41A0_BYTEARRAY_0[0x2BDE + 2124 * number + 0x10], &D41A0_BYTESTR_0.array_0x2BDE[number].word_0x010_2BDE_11246);
	return D41A0_BYTESTR_0.array_0x2BDE[number].word_0x010_2BDE_11246;
};
void set_x_D41A0_BYTEARRAY_0_0x2BDE_0x10(int number, int16_t value) {
	*(int16_t*)&x_D41A0_BYTEARRAY_0[0x2BDE + 2124 * number + 0x10] = value;
	D41A0_BYTESTR_0.array_0x2BDE[number].word_0x010_2BDE_11246 = value;
};

void set_x_D41A0_BYTEARRAY_0_0x2BDE_0x18(int number, int32_t value) {
	*(int32_t*)&x_D41A0_BYTEARRAY_0[0x2BDE + 2124 * number + 0x18]=value;
	D41A0_BYTESTR_0.array_0x2BDE[number].dword_0x018_2BDE_11254 = value;
};

void set_x_D41A0_BYTEARRAY_0_0x2BDE_0x3e1(int number, int8_t value) {
	*(int8_t*)&x_D41A0_BYTEARRAY_0[0x2BDE + 2124 * number + 0x3e1] = value;
	D41A0_BYTESTR_0.array_0x2BDE[number].byte_0x3E1_2BE4_12223 = value;
};

int32_t get_x_D41A0_BYTEARRAY_0_0x2BDE_0x1d1_2BDE_11707(int index, int subindex) {
	testdword((int32_t*)&x_D41A0_BYTEARRAY_0[0x84c * index +0x1d1+ 0x2BDE + 0xe * subindex + 0], &D41A0_BYTESTR_0.array_0x2BDE[index].struct_0x1d1_2BDE_11695[subindex].dword_0x1d1_2BDE_11695);
	return D41A0_BYTESTR_0.array_0x2BDE[index].struct_0x1d1_2BDE_11695[subindex].dword_0x1d1_2BDE_11695;
};//465
void set_x_D41A0_BYTEARRAY_0_0x2BDE_0x1d1_2BDE_11707(int index, int subindex, int32_t value) {
	*(int32_t*)&x_D41A0_BYTEARRAY_0[0x2BDE + 2124 * index + 0x1d1 + 0xe * subindex + 0] = value;
	D41A0_BYTESTR_0.array_0x2BDE[index].struct_0x1d1_2BDE_11695[subindex].dword_0x1d1_2BDE_11695 = value;
};//465

int32_t get_x_D41A0_BYTEARRAY_0_0x2BDE_0x1d5_2BDE_11707(int index, int subindex) {
	testdword((int32_t*)&x_D41A0_BYTEARRAY_0[0x84c * index + 0x1d1 + 0x2BDE + 0xe * subindex + 4], &D41A0_BYTESTR_0.array_0x2BDE[index].struct_0x1d1_2BDE_11695[subindex].dword_0x1d5_2BDE_11699);
	return D41A0_BYTESTR_0.array_0x2BDE[index].struct_0x1d1_2BDE_11695[subindex].dword_0x1d5_2BDE_11699;
};//469
void set_x_D41A0_BYTEARRAY_0_0x2BDE_0x1d5_2BDE_11707(int index, int subindex, int32_t value) {
	*(int32_t*)&x_D41A0_BYTEARRAY_0[0x2BDE + 2124 * index + 0x1d1 + 0xe * subindex + 4] = value;
	D41A0_BYTESTR_0.array_0x2BDE[index].struct_0x1d1_2BDE_11695[subindex].dword_0x1d5_2BDE_11699 = value;
};//469

int32_t get_x_D41A0_BYTEARRAY_0_0x2BDE_0x1d9_2BDE_11707(int index, int subindex) {
	testdword((int32_t*)&x_D41A0_BYTEARRAY_0[0x84c * index + 0x1d1 + 0x2BDE + 0xe * subindex + 8], &D41A0_BYTESTR_0.array_0x2BDE[index].struct_0x1d1_2BDE_11695[subindex].dword_0x1d9_2BDE_11703);
	return D41A0_BYTESTR_0.array_0x2BDE[index].struct_0x1d1_2BDE_11695[subindex].dword_0x1d9_2BDE_11703;
};//473
void set_x_D41A0_BYTEARRAY_0_0x2BDE_0x1d9_2BDE_11707(int index, int subindex, int32_t value) {
	*(int32_t*)&x_D41A0_BYTEARRAY_0[0x2BDE + 2124 * index + 0x1d1 + 0xe * subindex + 8] = value;
	D41A0_BYTESTR_0.array_0x2BDE[index].struct_0x1d1_2BDE_11695[subindex].dword_0x1d9_2BDE_11703 = value;
};//473
int16_t get_x_D41A0_BYTEARRAY_0_0x2BDE_0x1dd_2BDE_11707(int index, int subindex) {
	testword((int16_t*)&x_D41A0_BYTEARRAY_0[0x84c * index + 0x1d1 + 0x2BDE + 0xe*subindex+12], &D41A0_BYTESTR_0.array_0x2BDE[index].struct_0x1d1_2BDE_11695[subindex].word_0x1dd_2BDE_11707);
	return D41A0_BYTESTR_0.array_0x2BDE[index].struct_0x1d1_2BDE_11695[subindex].word_0x1dd_2BDE_11707;
};//477
void set_x_D41A0_BYTEARRAY_0_0x2BDE_0x1dd_2BDE_11707(int index, int subindex, int16_t value) {
	*(int16_t*)&x_D41A0_BYTEARRAY_0[0x2BDE + 2124 * index + 0x1d1 + 0xe* subindex+12] = value;
	D41A0_BYTESTR_0.array_0x2BDE[index].struct_0x1d1_2BDE_11695[subindex].word_0x1dd_2BDE_11707 = value;
};//477

int8_t* get_x_D41A0_BYTEARRAY_0_0x2BDE_0x39f_2BFA_12157(int index) {
	return D41A0_BYTESTR_0.array_0x2BDE[index].array_0x39f_2BFA_12157;
};

void set_x_D41A0_BYTEARRAY_0_0x2BDE_0x5a6(int number, int8_t value) {
	x_D41A0_BYTEARRAY_0[0x84c * number + 0x2BDE+0x5a6] = value;
	D41A0_BYTESTR_0.array_0x2BDE[number].byte_0x5a6_2BE4_12676 = value;
};

uint8_t* get_x_D41A0_BYTEARRAY_0_0x2BDE_0x649(int number) {
	return (uint8_t*)&D41A0_BYTESTR_0.array_0x2BDE[number].struct_0x649_2BDE_12839;
};

void set_x_D41A0_BYTEARRAY_0_0x2BDE_0x649(int index, int subindex, int32_t value) {
	*(int32_t*)&x_D41A0_BYTEARRAY_0[0x84c * index + 0x2BDE+0x649 + 4 * subindex] = value;
	D41A0_BYTESTR_0.array_0x2BDE[index].struct_0x649_2BDE_12839.dword_0x649_2BDE[subindex] = value;
};

void set_x_D41A0_BYTEARRAY_0_0x2BDE_0x717(int index, int subindex, int16_t value) {
	*(int16_t*)&x_D41A0_BYTEARRAY_0[0x84c * index + 0x2BDE + 0x717+2* subindex] = value;
	D41A0_BYTESTR_0.array_0x2BDE[index].struct_0x649_2BDE_12839.word_0x717_2BDE[subindex] = value;
};

void set_x_D41A0_BYTEARRAY_0_0x2BDE_0x781(int index, int subindex, int8_t value) {
	x_D41A0_BYTEARRAY_0[0x2BDE + 0x84c * index + 0x781 + subindex] = value;
	D41A0_BYTESTR_0.array_0x2BDE[index].struct_0x649_2BDE_12839.byte_0x781_2BDE[subindex] = value;
};

int8_t get_x_D41A0_BYTEARRAY_0_0x2BDE_0x7B5(int index, int subindex) {
	testbyte(&x_D41A0_BYTEARRAY_0[0x84c * index + 0x2BDE + 0x7b5 + subindex], (uint8_t*)&D41A0_BYTESTR_0.array_0x2BDE[index].struct_0x649_2BDE_12839.byte_0x7B5_2BDE[subindex]);
	return D41A0_BYTESTR_0.array_0x2BDE[index].struct_0x649_2BDE_12839.byte_0x7B5_2BDE[subindex];
};

void set_x_D41A0_BYTEARRAY_0_0x2BDE_0x7B5(int index, int subindex, int8_t value) {
	x_D41A0_BYTEARRAY_0[0x84c * index + 0x2BDE + 0x7b5 + subindex] = value;
	D41A0_BYTESTR_0.array_0x2BDE[index].struct_0x649_2BDE_12839.byte_0x7B5_2BDE[subindex] = value;
};

int8_t get_x_D41A0_BYTEARRAY_0_0x2BDE_0x7CF(int index, int subindex) {
	testbyte(&x_D41A0_BYTEARRAY_0[0x84c * index + 0x2BDE + 0x7cf + subindex], (uint8_t*)&D41A0_BYTESTR_0.array_0x2BDE[index].struct_0x649_2BDE_12839.array_0x7CF_2BDE_13229[subindex]);
	return D41A0_BYTESTR_0.array_0x2BDE[index].struct_0x649_2BDE_12839.array_0x7CF_2BDE_13229[subindex];
};
void set_x_D41A0_BYTEARRAY_0_0x2BDE_0x7CF(int index, int subindex, int8_t value) {
	x_D41A0_BYTEARRAY_0[0x84c * index + 0x2BDE+0x7cf + subindex] = value;
	D41A0_BYTESTR_0.array_0x2BDE[index].struct_0x649_2BDE_12839.array_0x7CF_2BDE_13229[subindex] = value;
};

void set_x_D41A0_BYTEARRAY_0_0x2BDE_0x7e8(int index, int subindex, int8_t value) {
	x_D41A0_BYTEARRAY_0[0x84c * index + 0x2BDE + 0x7e8 + subindex] = value;
	D41A0_BYTESTR_0.array_0x2BDE[index].struct_0x649_2BDE_12839.array_0x7CF_2BDE_13229[0x18+subindex+1] = value;
};
int8_t get_x_D41A0_BYTEARRAY_0_0x2BDE_0x803(int index, int subindex) {
	testbyte(&x_D41A0_BYTEARRAY_0[0x84c * index + 0x2BDE + 0x803 + subindex], (uint8_t*)&D41A0_BYTESTR_0.array_0x2BDE[index].struct_0x649_2BDE_12839.byte_0x803_2BDE[subindex]);
	return D41A0_BYTESTR_0.array_0x2BDE[index].struct_0x649_2BDE_12839.byte_0x803_2BDE[subindex];
};
void set_x_D41A0_BYTEARRAY_0_0x2BDE_0x803(int index, int subindex, int8_t value) {
	x_D41A0_BYTEARRAY_0[0x84c * index + 0x2BDE + 0x803 + subindex] = value;
	D41A0_BYTESTR_0.array_0x2BDE[index].struct_0x649_2BDE_12839.byte_0x803_2BDE[subindex] = value;
};
void set_x_D41A0_BYTEARRAY_0_0x2BDE_0x81c(int index, int subindex, int8_t value) {
	x_D41A0_BYTEARRAY_0[0x84c * index + 0x2BDE + 0x81c + subindex] = value;
	D41A0_BYTESTR_0.array_0x2BDE[index].struct_0x649_2BDE_12839.byte_0x81C_2BDE[subindex] = value;
};

int16_t get_x_D41A0_BYTEARRAY_0_0x2BDE_0x837(int index) {
	testword((int16_t*)&x_D41A0_BYTEARRAY_0[0x84c * index + 0x2BDE+0x837], (int16_t*)&D41A0_BYTESTR_0.array_0x2BDE[index].word_0x837_2BDE);
	return D41A0_BYTESTR_0.array_0x2BDE[index].word_0x837_2BDE;
};
void set_x_D41A0_BYTEARRAY_0_0x2BDE_0x837(int index, int16_t value) {
	*(int16_t*)&x_D41A0_BYTEARRAY_0[0x84c * index + 0x2BDE + 0x837] = value;
	D41A0_BYTESTR_0.array_0x2BDE[index].word_0x837_2BDE = value;
};
int16_t get_x_D41A0_BYTEARRAY_0_0x2BDE_0x839(int index) {
	testword((int16_t*)&x_D41A0_BYTEARRAY_0[0x84c * index + 0x2BDE + 0x839], (int16_t*)&D41A0_BYTESTR_0.array_0x2BDE[index].word_0x839_2BDE);
	return D41A0_BYTESTR_0.array_0x2BDE[index].word_0x839_2BDE;
};
void set_x_D41A0_BYTEARRAY_0_0x2BDE_0x839(int index, int16_t value) {
	*(int16_t*)&x_D41A0_BYTEARRAY_0[0x84c * index + 0x2BDE + 0x839] = value;
	D41A0_BYTESTR_0.array_0x2BDE[index].word_0x839_2BDE = value;
};

uint8_t get_x_D41A0_BYTEARRAY_0_0x2BDE(int number) {
	testbyte(&x_D41A0_BYTEARRAY_0[0x84c * number + 0x2BDE], &D41A0_BYTESTR_0.array_0x2BDE[number].byte_0x002_2BE0_11232);
	return D41A0_BYTESTR_0.array_0x2BDE[number].byte_0x002_2BE0_11232;
};
void set_x_D41A0_BYTEARRAY_0_0x2BDE(int number, uint8_t value) {
	x_D41A0_BYTEARRAY_0[0x84c * number + 0x2BDE] = value;
	D41A0_BYTESTR_0.array_0x2BDE[number].byte_0x002_2BE0_11232 = value;
};

//array_0x6E3E
int8_t get_x_D41A0_BYTEARRAY_0_0x6E3E(int index, int subindex) {
	testbyte(&x_D41A0_BYTEARRAY_0[0x6E3E+ index*0xa+ subindex], (uint8_t*)&D41A0_BYTESTR_0.array_0x6E3E[index]);
	return D41A0_BYTESTR_0.array_0x6E3E[index][subindex];
};
void set_x_D41A0_BYTEARRAY_0_0x6E3E(int index, int subindex, int8_t value) {
	x_D41A0_BYTEARRAY_0[0x6E3E + index*0xa+ subindex] = value;
	D41A0_BYTESTR_0.array_0x6E3E[index][subindex] = value;
};

type_str_0x6E8E* get_x_D41A0_BYTEARRAY_0_0x6E8E_adr() {
	return D41A0_BYTESTR_0.struct_0x6E8E;
};
*/
/*
uint8_t* get_x_D41A0_BYTEARRAY_0_0x6F32() {
	testdword((int32_t*)&x_D41A0_BYTEARRAY_0[0x6F32], (int32_t*)&D41A0_BYTESTR_0.pointer_0x6F32);
	return D41A0_BYTESTR_0.pointer_0x6F32;
};
void set_x_D41A0_BYTEARRAY_0_0x6F32(uint8_t* value) {
	*(uint8_t**)&x_D41A0_BYTEARRAY_0[0x6F32] = value;
	D41A0_BYTESTR_0.pointer_0x6F32 = value;
};

uint8_t get_x_D41A0_BYTEARRAY_0_0x36e0b() {
	testbyte(&x_D41A0_BYTEARRAY_0[0x36E0B], &D41A0_BYTESTR_0.byte_0x36E0B);
	return x_D41A0_BYTEARRAY_0[0x36E0B];
};
void set_x_D41A0_BYTEARRAY_0_0x36e0b(uint8_t value) {
	x_D41A0_BYTEARRAY_0[0x36E0B] = value;
	D41A0_BYTESTR_0.byte_0x36E0B = value;
};
void and_x_D41A0_BYTEARRAY_0_0x36e0b(uint8_t value) {
	set_x_D41A0_BYTEARRAY_0_0x36e0b(get_x_D41A0_BYTEARRAY_0_0x36e0b()&value);
};

void clean_x_D41A0_BYTEARRAY_0() {
	D41A0_BYTESTR_0.dword_0x8 = 0;
};
*/
void errorsize(int type, int size)
{
	printf("Test x_D41A0_BYTEARRAY_0 %d %X ERROR\n", type, size);
	//exit(0);
}
/*
void test_x_D41A0_BYTEARRAY_0() {
	//test1
	if (D41A0_BYTESTR_0.dword_0x8 != *(x_DWORD *)(x_D41A0_BYTEARRAY_0 + 8))errorsize(0,0);
	//test2
	if (sizeof(D41A0_BYTESTR_0) != 0x36e18)
	{
		;// errorsize(1, sizeof(D41A0_BYTESTR_0));
	}
	//test3
	for(int i=0;i< 0x36e17;i++)
		if(((uint8_t*)&D41A0_BYTESTR_0)[i]!= x_D41A0_BYTEARRAY_0[i])//((uint8_t*)&D41A0_BYTESTR_0+i)
			errorsize(2,i);
};
*/

int my_sign32(int32_t var)
{
	if (var < 0)return -1;
	return 0;
}

int my_sign16(int16_t var)
{
	return my_sign32(var);
}